// ed_synth.v

// Generated using ACDS version 24.1 115

`timescale 1 ps / 1 ps
module ed_synth (
		input  wire         axil_driver_clk_i_clk,       //   axil_driver_clk_i.clk
		input  wire         axil_driver_rst_n_i_reset_n, // axil_driver_rst_n_i.reset_n
		output wire         cal_done_rst_n_reset_n,      //      cal_done_rst_n.reset_n
		input  wire         ref_clk_i_clk,               //           ref_clk_i.clk
		input  wire         core_init_n_i_reset_n,       //       core_init_n_i.reset_n
		output wire         usr_clk_o_clk,               //           usr_clk_o.clk
		output wire         usr_rst_n_o_reset_n,         //         usr_rst_n_o.reset_n
		input  wire [31:0]  s0_axi4_araddr,              //             s0_axi4.araddr
		input  wire [1:0]   s0_axi4_arburst,             //                    .arburst
		input  wire [6:0]   s0_axi4_arid,                //                    .arid
		input  wire [7:0]   s0_axi4_arlen,               //                    .arlen
		input  wire         s0_axi4_arlock,              //                    .arlock
		input  wire [3:0]   s0_axi4_arqos,               //                    .arqos
		input  wire [2:0]   s0_axi4_arsize,              //                    .arsize
		input  wire         s0_axi4_arvalid,             //                    .arvalid
		input  wire [3:0]   s0_axi4_aruser,              //                    .aruser
		input  wire [2:0]   s0_axi4_arprot,              //                    .arprot
		input  wire [31:0]  s0_axi4_awaddr,              //                    .awaddr
		input  wire [1:0]   s0_axi4_awburst,             //                    .awburst
		input  wire [6:0]   s0_axi4_awid,                //                    .awid
		input  wire [7:0]   s0_axi4_awlen,               //                    .awlen
		input  wire         s0_axi4_awlock,              //                    .awlock
		input  wire [3:0]   s0_axi4_awqos,               //                    .awqos
		input  wire [2:0]   s0_axi4_awsize,              //                    .awsize
		input  wire         s0_axi4_awvalid,             //                    .awvalid
		input  wire [3:0]   s0_axi4_awuser,              //                    .awuser
		input  wire [2:0]   s0_axi4_awprot,              //                    .awprot
		input  wire         s0_axi4_bready,              //                    .bready
		input  wire         s0_axi4_rready,              //                    .rready
		input  wire [255:0] s0_axi4_wdata,               //                    .wdata
		input  wire [31:0]  s0_axi4_wstrb,               //                    .wstrb
		input  wire         s0_axi4_wlast,               //                    .wlast
		input  wire         s0_axi4_wvalid,              //                    .wvalid
		input  wire [63:0]  s0_axi4_wuser,               //                    .wuser
		output wire [63:0]  s0_axi4_ruser,               //                    .ruser
		output wire         s0_axi4_arready,             //                    .arready
		output wire         s0_axi4_awready,             //                    .awready
		output wire [6:0]   s0_axi4_bid,                 //                    .bid
		output wire [1:0]   s0_axi4_bresp,               //                    .bresp
		output wire         s0_axi4_bvalid,              //                    .bvalid
		output wire [255:0] s0_axi4_rdata,               //                    .rdata
		output wire [6:0]   s0_axi4_rid,                 //                    .rid
		output wire         s0_axi4_rlast,               //                    .rlast
		output wire [1:0]   s0_axi4_rresp,               //                    .rresp
		output wire         s0_axi4_rvalid,              //                    .rvalid
		output wire         s0_axi4_wready,              //                    .wready
		output wire         mem_mem_ck_t,                //                 mem.mem_ck_t
		output wire         mem_mem_ck_c,                //                    .mem_ck_c
		output wire         mem_mem_cke,                 //                    .mem_cke
		output wire         mem_mem_reset_n,             //                    .mem_reset_n
		output wire         mem_mem_cs,                  //                    .mem_cs
		output wire [5:0]   mem_mem_ca,                  //                    .mem_ca
		inout  wire [31:0]  mem_mem_dq,                  //                    .mem_dq
		inout  wire [3:0]   mem_mem_dqs_t,               //                    .mem_dqs_t
		inout  wire [3:0]   mem_mem_dqs_c,               //                    .mem_dqs_c
		inout  wire [3:0]   mem_mem_dmi,                 //                    .mem_dmi
		input  wire         oct_oct_rzqin,               //                 oct.oct_rzqin
		input  wire         s0_axil_clk_i_clk,           //       s0_axil_clk_i.clk
		input  wire         s0_axil_rst_n_i_reset_n      //     s0_axil_rst_n_i.reset_n
	);

	wire  [31:0] emif_ph2_axil_driver_0_axil_driver_axi4_lite_awaddr;  // emif_ph2_axil_driver_0:axil_driver_awaddr -> emif_ph2_inst:s0_axi4lite_awaddr
	wire   [1:0] emif_ph2_axil_driver_0_axil_driver_axi4_lite_bresp;   // emif_ph2_inst:s0_axi4lite_bresp -> emif_ph2_axil_driver_0:axil_driver_bresp
	wire         emif_ph2_axil_driver_0_axil_driver_axi4_lite_arready; // emif_ph2_inst:s0_axi4lite_arready -> emif_ph2_axil_driver_0:axil_driver_arready
	wire  [31:0] emif_ph2_axil_driver_0_axil_driver_axi4_lite_rdata;   // emif_ph2_inst:s0_axi4lite_rdata -> emif_ph2_axil_driver_0:axil_driver_rdata
	wire   [3:0] emif_ph2_axil_driver_0_axil_driver_axi4_lite_wstrb;   // emif_ph2_axil_driver_0:axil_driver_wstrb -> emif_ph2_inst:s0_axi4lite_wstrb
	wire         emif_ph2_axil_driver_0_axil_driver_axi4_lite_wready;  // emif_ph2_inst:s0_axi4lite_wready -> emif_ph2_axil_driver_0:axil_driver_wready
	wire         emif_ph2_axil_driver_0_axil_driver_axi4_lite_awready; // emif_ph2_inst:s0_axi4lite_awready -> emif_ph2_axil_driver_0:axil_driver_awready
	wire         emif_ph2_axil_driver_0_axil_driver_axi4_lite_rready;  // emif_ph2_axil_driver_0:axil_driver_rready -> emif_ph2_inst:s0_axi4lite_rready
	wire         emif_ph2_axil_driver_0_axil_driver_axi4_lite_bready;  // emif_ph2_axil_driver_0:axil_driver_bready -> emif_ph2_inst:s0_axi4lite_bready
	wire         emif_ph2_axil_driver_0_axil_driver_axi4_lite_wvalid;  // emif_ph2_axil_driver_0:axil_driver_wvalid -> emif_ph2_inst:s0_axi4lite_wvalid
	wire  [31:0] emif_ph2_axil_driver_0_axil_driver_axi4_lite_araddr;  // emif_ph2_axil_driver_0:axil_driver_araddr -> emif_ph2_inst:s0_axi4lite_araddr
	wire   [1:0] emif_ph2_axil_driver_0_axil_driver_axi4_lite_rresp;   // emif_ph2_inst:s0_axi4lite_rresp -> emif_ph2_axil_driver_0:axil_driver_rresp
	wire   [2:0] emif_ph2_axil_driver_0_axil_driver_axi4_lite_arprot;  // emif_ph2_axil_driver_0:axil_driver_arprot -> emif_ph2_inst:s0_axi4lite_arprot
	wire  [31:0] emif_ph2_axil_driver_0_axil_driver_axi4_lite_wdata;   // emif_ph2_axil_driver_0:axil_driver_wdata -> emif_ph2_inst:s0_axi4lite_wdata
	wire         emif_ph2_axil_driver_0_axil_driver_axi4_lite_arvalid; // emif_ph2_axil_driver_0:axil_driver_arvalid -> emif_ph2_inst:s0_axi4lite_arvalid
	wire   [2:0] emif_ph2_axil_driver_0_axil_driver_axi4_lite_awprot;  // emif_ph2_axil_driver_0:axil_driver_awprot -> emif_ph2_inst:s0_axi4lite_awprot
	wire         emif_ph2_axil_driver_0_axil_driver_axi4_lite_bvalid;  // emif_ph2_inst:s0_axi4lite_bvalid -> emif_ph2_axil_driver_0:axil_driver_bvalid
	wire         emif_ph2_axil_driver_0_axil_driver_axi4_lite_awvalid; // emif_ph2_axil_driver_0:axil_driver_awvalid -> emif_ph2_inst:s0_axi4lite_awvalid
	wire         emif_ph2_axil_driver_0_axil_driver_axi4_lite_rvalid;  // emif_ph2_inst:s0_axi4lite_rvalid -> emif_ph2_axil_driver_0:axil_driver_rvalid

	ed_synth_axil_driver_0 emif_ph2_axil_driver_0 (
		.axil_driver_clk     (axil_driver_clk_i_clk),                                //   input,   width = 1,       axil_driver_clk.clk
		.axil_driver_rst_n   (axil_driver_rst_n_i_reset_n),                          //   input,   width = 1,     axil_driver_rst_n.reset_n
		.axil_driver_awaddr  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_awaddr),  //  output,  width = 32, axil_driver_axi4_lite.awaddr
		.axil_driver_awvalid (emif_ph2_axil_driver_0_axil_driver_axi4_lite_awvalid), //  output,   width = 1,                      .awvalid
		.axil_driver_awready (emif_ph2_axil_driver_0_axil_driver_axi4_lite_awready), //   input,   width = 1,                      .awready
		.axil_driver_wdata   (emif_ph2_axil_driver_0_axil_driver_axi4_lite_wdata),   //  output,  width = 32,                      .wdata
		.axil_driver_wstrb   (emif_ph2_axil_driver_0_axil_driver_axi4_lite_wstrb),   //  output,   width = 4,                      .wstrb
		.axil_driver_wvalid  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_wvalid),  //  output,   width = 1,                      .wvalid
		.axil_driver_wready  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_wready),  //   input,   width = 1,                      .wready
		.axil_driver_bresp   (emif_ph2_axil_driver_0_axil_driver_axi4_lite_bresp),   //   input,   width = 2,                      .bresp
		.axil_driver_bvalid  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_bvalid),  //   input,   width = 1,                      .bvalid
		.axil_driver_bready  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_bready),  //  output,   width = 1,                      .bready
		.axil_driver_araddr  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_araddr),  //  output,  width = 32,                      .araddr
		.axil_driver_arvalid (emif_ph2_axil_driver_0_axil_driver_axi4_lite_arvalid), //  output,   width = 1,                      .arvalid
		.axil_driver_arready (emif_ph2_axil_driver_0_axil_driver_axi4_lite_arready), //   input,   width = 1,                      .arready
		.axil_driver_rdata   (emif_ph2_axil_driver_0_axil_driver_axi4_lite_rdata),   //   input,  width = 32,                      .rdata
		.axil_driver_rresp   (emif_ph2_axil_driver_0_axil_driver_axi4_lite_rresp),   //   input,   width = 2,                      .rresp
		.axil_driver_rvalid  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_rvalid),  //   input,   width = 1,                      .rvalid
		.axil_driver_rready  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_rready),  //  output,   width = 1,                      .rready
		.axil_driver_awprot  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_awprot),  //  output,   width = 3,                      .awprot
		.axil_driver_arprot  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_arprot),  //  output,   width = 3,                      .arprot
		.cal_done_rst_n      (cal_done_rst_n_reset_n)                                //  output,   width = 1,        cal_done_rst_n.reset_n
	);

	ed_synth_emif_ph2_inst emif_ph2_inst (
		.ref_clk_0           (ref_clk_i_clk),                                        //   input,    width = 1,     ref_clk_0.clk
		.core_init_n_0       (core_init_n_i_reset_n),                                //   input,    width = 1, core_init_n_0.reset_n
		.usr_clk_0           (usr_clk_o_clk),                                        //  output,    width = 1,     usr_clk_0.clk
		.usr_rst_n_0         (usr_rst_n_o_reset_n),                                  //  output,    width = 1,   usr_rst_n_0.reset_n
		.s0_axi4_araddr      (s0_axi4_araddr),                                       //   input,   width = 32,       s0_axi4.araddr
		.s0_axi4_arburst     (s0_axi4_arburst),                                      //   input,    width = 2,              .arburst
		.s0_axi4_arid        (s0_axi4_arid),                                         //   input,    width = 7,              .arid
		.s0_axi4_arlen       (s0_axi4_arlen),                                        //   input,    width = 8,              .arlen
		.s0_axi4_arlock      (s0_axi4_arlock),                                       //   input,    width = 1,              .arlock
		.s0_axi4_arqos       (s0_axi4_arqos),                                        //   input,    width = 4,              .arqos
		.s0_axi4_arsize      (s0_axi4_arsize),                                       //   input,    width = 3,              .arsize
		.s0_axi4_arvalid     (s0_axi4_arvalid),                                      //   input,    width = 1,              .arvalid
		.s0_axi4_aruser      (s0_axi4_aruser),                                       //   input,    width = 4,              .aruser
		.s0_axi4_arprot      (s0_axi4_arprot),                                       //   input,    width = 3,              .arprot
		.s0_axi4_awaddr      (s0_axi4_awaddr),                                       //   input,   width = 32,              .awaddr
		.s0_axi4_awburst     (s0_axi4_awburst),                                      //   input,    width = 2,              .awburst
		.s0_axi4_awid        (s0_axi4_awid),                                         //   input,    width = 7,              .awid
		.s0_axi4_awlen       (s0_axi4_awlen),                                        //   input,    width = 8,              .awlen
		.s0_axi4_awlock      (s0_axi4_awlock),                                       //   input,    width = 1,              .awlock
		.s0_axi4_awqos       (s0_axi4_awqos),                                        //   input,    width = 4,              .awqos
		.s0_axi4_awsize      (s0_axi4_awsize),                                       //   input,    width = 3,              .awsize
		.s0_axi4_awvalid     (s0_axi4_awvalid),                                      //   input,    width = 1,              .awvalid
		.s0_axi4_awuser      (s0_axi4_awuser),                                       //   input,    width = 4,              .awuser
		.s0_axi4_awprot      (s0_axi4_awprot),                                       //   input,    width = 3,              .awprot
		.s0_axi4_bready      (s0_axi4_bready),                                       //   input,    width = 1,              .bready
		.s0_axi4_rready      (s0_axi4_rready),                                       //   input,    width = 1,              .rready
		.s0_axi4_wdata       (s0_axi4_wdata),                                        //   input,  width = 256,              .wdata
		.s0_axi4_wstrb       (s0_axi4_wstrb),                                        //   input,   width = 32,              .wstrb
		.s0_axi4_wlast       (s0_axi4_wlast),                                        //   input,    width = 1,              .wlast
		.s0_axi4_wvalid      (s0_axi4_wvalid),                                       //   input,    width = 1,              .wvalid
		.s0_axi4_wuser       (s0_axi4_wuser),                                        //   input,   width = 64,              .wuser
		.s0_axi4_ruser       (s0_axi4_ruser),                                        //  output,   width = 64,              .ruser
		.s0_axi4_arready     (s0_axi4_arready),                                      //  output,    width = 1,              .arready
		.s0_axi4_awready     (s0_axi4_awready),                                      //  output,    width = 1,              .awready
		.s0_axi4_bid         (s0_axi4_bid),                                          //  output,    width = 7,              .bid
		.s0_axi4_bresp       (s0_axi4_bresp),                                        //  output,    width = 2,              .bresp
		.s0_axi4_bvalid      (s0_axi4_bvalid),                                       //  output,    width = 1,              .bvalid
		.s0_axi4_rdata       (s0_axi4_rdata),                                        //  output,  width = 256,              .rdata
		.s0_axi4_rid         (s0_axi4_rid),                                          //  output,    width = 7,              .rid
		.s0_axi4_rlast       (s0_axi4_rlast),                                        //  output,    width = 1,              .rlast
		.s0_axi4_rresp       (s0_axi4_rresp),                                        //  output,    width = 2,              .rresp
		.s0_axi4_rvalid      (s0_axi4_rvalid),                                       //  output,    width = 1,              .rvalid
		.s0_axi4_wready      (s0_axi4_wready),                                       //  output,    width = 1,              .wready
		.mem_ck_t_0          (mem_mem_ck_t),                                         //  output,    width = 1,         mem_0.mem_ck_t
		.mem_ck_c_0          (mem_mem_ck_c),                                         //  output,    width = 1,              .mem_ck_c
		.mem_cke_0           (mem_mem_cke),                                          //  output,    width = 1,              .mem_cke
		.mem_reset_n_0       (mem_mem_reset_n),                                      //  output,    width = 1,              .mem_reset_n
		.mem_cs_0            (mem_mem_cs),                                           //  output,    width = 1,              .mem_cs
		.mem_ca_0            (mem_mem_ca),                                           //  output,    width = 6,              .mem_ca
		.mem_dq_0            (mem_mem_dq),                                           //   inout,   width = 32,              .mem_dq
		.mem_dqs_t_0         (mem_mem_dqs_t),                                        //   inout,    width = 4,              .mem_dqs_t
		.mem_dqs_c_0         (mem_mem_dqs_c),                                        //   inout,    width = 4,              .mem_dqs_c
		.mem_dmi_0           (mem_mem_dmi),                                          //   inout,    width = 4,              .mem_dmi
		.oct_rzqin_0         (oct_oct_rzqin),                                        //   input,    width = 1,         oct_0.oct_rzqin
		.s0_axi4lite_clk     (s0_axil_clk_i_clk),                                    //   input,    width = 1,   s0_axil_clk.clk
		.s0_axi4lite_rst_n   (s0_axil_rst_n_i_reset_n),                              //   input,    width = 1, s0_axil_rst_n.reset_n
		.s0_axi4lite_awaddr  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_awaddr),  //   input,   width = 32,       s0_axil.awaddr
		.s0_axi4lite_awvalid (emif_ph2_axil_driver_0_axil_driver_axi4_lite_awvalid), //   input,    width = 1,              .awvalid
		.s0_axi4lite_awready (emif_ph2_axil_driver_0_axil_driver_axi4_lite_awready), //  output,    width = 1,              .awready
		.s0_axi4lite_wdata   (emif_ph2_axil_driver_0_axil_driver_axi4_lite_wdata),   //   input,   width = 32,              .wdata
		.s0_axi4lite_wstrb   (emif_ph2_axil_driver_0_axil_driver_axi4_lite_wstrb),   //   input,    width = 4,              .wstrb
		.s0_axi4lite_wvalid  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_wvalid),  //   input,    width = 1,              .wvalid
		.s0_axi4lite_wready  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_wready),  //  output,    width = 1,              .wready
		.s0_axi4lite_bresp   (emif_ph2_axil_driver_0_axil_driver_axi4_lite_bresp),   //  output,    width = 2,              .bresp
		.s0_axi4lite_bvalid  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_bvalid),  //  output,    width = 1,              .bvalid
		.s0_axi4lite_bready  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_bready),  //   input,    width = 1,              .bready
		.s0_axi4lite_araddr  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_araddr),  //   input,   width = 32,              .araddr
		.s0_axi4lite_arvalid (emif_ph2_axil_driver_0_axil_driver_axi4_lite_arvalid), //   input,    width = 1,              .arvalid
		.s0_axi4lite_arready (emif_ph2_axil_driver_0_axil_driver_axi4_lite_arready), //  output,    width = 1,              .arready
		.s0_axi4lite_rdata   (emif_ph2_axil_driver_0_axil_driver_axi4_lite_rdata),   //  output,   width = 32,              .rdata
		.s0_axi4lite_rresp   (emif_ph2_axil_driver_0_axil_driver_axi4_lite_rresp),   //  output,    width = 2,              .rresp
		.s0_axi4lite_rvalid  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_rvalid),  //  output,    width = 1,              .rvalid
		.s0_axi4lite_rready  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_rready),  //   input,    width = 1,              .rready
		.s0_axi4lite_awprot  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_awprot),  //   input,    width = 3,              .awprot
		.s0_axi4lite_arprot  (emif_ph2_axil_driver_0_axil_driver_axi4_lite_arprot)   //   input,    width = 3,              .arprot
	);

endmodule
