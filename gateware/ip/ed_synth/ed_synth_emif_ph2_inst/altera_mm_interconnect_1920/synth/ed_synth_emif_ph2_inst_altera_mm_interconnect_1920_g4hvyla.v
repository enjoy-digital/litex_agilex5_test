// ed_synth_emif_ph2_inst_altera_mm_interconnect_1920_g4hvyla.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 24.1 115

`timescale 1 ps / 1 ps
module ed_synth_emif_ph2_inst_altera_mm_interconnect_1920_g4hvyla (
		input  wire [31:0] jamb_master_address,                                      //                                        jamb_master.address
		output wire        jamb_master_waitrequest,                                  //                                                   .waitrequest
		input  wire [3:0]  jamb_master_byteenable,                                   //                                                   .byteenable
		input  wire        jamb_master_read,                                         //                                                   .read
		output wire [31:0] jamb_master_readdata,                                     //                                                   .readdata
		output wire        jamb_master_readdatavalid,                                //                                                   .readdatavalid
		input  wire        jamb_master_write,                                        //                                                   .write
		input  wire [31:0] jamb_master_writedata,                                    //                                                   .writedata
		output wire [31:0] arbit_s0_axi4lite_awaddr,                                 //                                  arbit_s0_axi4lite.awaddr
		output wire [2:0]  arbit_s0_axi4lite_awprot,                                 //                                                   .awprot
		output wire        arbit_s0_axi4lite_awvalid,                                //                                                   .awvalid
		input  wire        arbit_s0_axi4lite_awready,                                //                                                   .awready
		output wire [31:0] arbit_s0_axi4lite_wdata,                                  //                                                   .wdata
		output wire [3:0]  arbit_s0_axi4lite_wstrb,                                  //                                                   .wstrb
		output wire        arbit_s0_axi4lite_wvalid,                                 //                                                   .wvalid
		input  wire        arbit_s0_axi4lite_wready,                                 //                                                   .wready
		input  wire [1:0]  arbit_s0_axi4lite_bresp,                                  //                                                   .bresp
		input  wire        arbit_s0_axi4lite_bvalid,                                 //                                                   .bvalid
		output wire        arbit_s0_axi4lite_bready,                                 //                                                   .bready
		output wire [31:0] arbit_s0_axi4lite_araddr,                                 //                                                   .araddr
		output wire [2:0]  arbit_s0_axi4lite_arprot,                                 //                                                   .arprot
		output wire        arbit_s0_axi4lite_arvalid,                                //                                                   .arvalid
		input  wire        arbit_s0_axi4lite_arready,                                //                                                   .arready
		input  wire [31:0] arbit_s0_axi4lite_rdata,                                  //                                                   .rdata
		input  wire [1:0]  arbit_s0_axi4lite_rresp,                                  //                                                   .rresp
		input  wire        arbit_s0_axi4lite_rvalid,                                 //                                                   .rvalid
		output wire        arbit_s0_axi4lite_rready,                                 //                                                   .rready
		input  wire        arbit_s0_axi4lite_aresetn_reset_bridge_in_reset_reset,    //    arbit_s0_axi4lite_aresetn_reset_bridge_in_reset.reset,        Reset Input
		input  wire        jamb_master_translator_reset_reset_bridge_in_reset_reset, // jamb_master_translator_reset_reset_bridge_in_reset.reset,        Reset Input
		input  wire        clk_bridge_out_clk_clk,                                   //                                 clk_bridge_out_clk.clk,          Clock Input
		input  wire        clk_bridge_out_clk_3_clk                                  //                               clk_bridge_out_clk_3.clk,          Clock Input
	);

	wire          jamb_master_translator_avalon_universal_master_0_waitrequest;   // jamb_master_agent:av_waitrequest -> jamb_master_translator:uav_waitrequest
	wire   [31:0] jamb_master_translator_avalon_universal_master_0_readdata;      // jamb_master_agent:av_readdata -> jamb_master_translator:uav_readdata
	wire          jamb_master_translator_avalon_universal_master_0_debugaccess;   // jamb_master_translator:uav_debugaccess -> jamb_master_agent:av_debugaccess
	wire   [31:0] jamb_master_translator_avalon_universal_master_0_address;       // jamb_master_translator:uav_address -> jamb_master_agent:av_address
	wire          jamb_master_translator_avalon_universal_master_0_read;          // jamb_master_translator:uav_read -> jamb_master_agent:av_read
	wire    [3:0] jamb_master_translator_avalon_universal_master_0_byteenable;    // jamb_master_translator:uav_byteenable -> jamb_master_agent:av_byteenable
	wire          jamb_master_translator_avalon_universal_master_0_readdatavalid; // jamb_master_agent:av_readdatavalid -> jamb_master_translator:uav_readdatavalid
	wire          jamb_master_translator_avalon_universal_master_0_lock;          // jamb_master_translator:uav_lock -> jamb_master_agent:av_lock
	wire          jamb_master_translator_avalon_universal_master_0_write;         // jamb_master_translator:uav_write -> jamb_master_agent:av_write
	wire   [31:0] jamb_master_translator_avalon_universal_master_0_writedata;     // jamb_master_translator:uav_writedata -> jamb_master_agent:av_writedata
	wire    [2:0] jamb_master_translator_avalon_universal_master_0_burstcount;    // jamb_master_translator:uav_burstcount -> jamb_master_agent:av_burstcount
	wire          cmd_mux_src_valid;                                              // cmd_mux:src_valid -> arbit_s0_axi4lite_agent:write_cp_valid
	wire  [125:0] cmd_mux_src_data;                                               // cmd_mux:src_data -> arbit_s0_axi4lite_agent:write_cp_data
	wire          cmd_mux_src_ready;                                              // arbit_s0_axi4lite_agent:write_cp_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                            // cmd_mux:src_channel -> arbit_s0_axi4lite_agent:write_cp_channel
	wire          cmd_mux_src_startofpacket;                                      // cmd_mux:src_startofpacket -> arbit_s0_axi4lite_agent:write_cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                        // cmd_mux:src_endofpacket -> arbit_s0_axi4lite_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                          // cmd_mux_001:src_valid -> arbit_s0_axi4lite_agent:read_cp_valid
	wire  [125:0] cmd_mux_001_src_data;                                           // cmd_mux_001:src_data -> arbit_s0_axi4lite_agent:read_cp_data
	wire          cmd_mux_001_src_ready;                                          // arbit_s0_axi4lite_agent:read_cp_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                        // cmd_mux_001:src_channel -> arbit_s0_axi4lite_agent:read_cp_channel
	wire          cmd_mux_001_src_startofpacket;                                  // cmd_mux_001:src_startofpacket -> arbit_s0_axi4lite_agent:read_cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                    // cmd_mux_001:src_endofpacket -> arbit_s0_axi4lite_agent:read_cp_endofpacket
	wire          jamb_master_agent_cp_valid;                                     // jamb_master_agent:cp_valid -> router:sink_valid
	wire  [125:0] jamb_master_agent_cp_data;                                      // jamb_master_agent:cp_data -> router:sink_data
	wire          jamb_master_agent_cp_ready;                                     // router:sink_ready -> jamb_master_agent:cp_ready
	wire          jamb_master_agent_cp_startofpacket;                             // jamb_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          jamb_master_agent_cp_endofpacket;                               // jamb_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          arbit_s0_axi4lite_agent_write_rp_valid;                         // arbit_s0_axi4lite_agent:write_rp_valid -> router_001:sink_valid
	wire  [125:0] arbit_s0_axi4lite_agent_write_rp_data;                          // arbit_s0_axi4lite_agent:write_rp_data -> router_001:sink_data
	wire          arbit_s0_axi4lite_agent_write_rp_ready;                         // router_001:sink_ready -> arbit_s0_axi4lite_agent:write_rp_ready
	wire          arbit_s0_axi4lite_agent_write_rp_startofpacket;                 // arbit_s0_axi4lite_agent:write_rp_startofpacket -> router_001:sink_startofpacket
	wire          arbit_s0_axi4lite_agent_write_rp_endofpacket;                   // arbit_s0_axi4lite_agent:write_rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                           // router_001:src_valid -> rsp_demux:sink_valid
	wire  [125:0] router_001_src_data;                                            // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                           // rsp_demux:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                         // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                   // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                     // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          arbit_s0_axi4lite_agent_read_rp_valid;                          // arbit_s0_axi4lite_agent:read_rp_valid -> router_002:sink_valid
	wire  [125:0] arbit_s0_axi4lite_agent_read_rp_data;                           // arbit_s0_axi4lite_agent:read_rp_data -> router_002:sink_data
	wire          arbit_s0_axi4lite_agent_read_rp_ready;                          // router_002:sink_ready -> arbit_s0_axi4lite_agent:read_rp_ready
	wire          arbit_s0_axi4lite_agent_read_rp_startofpacket;                  // arbit_s0_axi4lite_agent:read_rp_startofpacket -> router_002:sink_startofpacket
	wire          arbit_s0_axi4lite_agent_read_rp_endofpacket;                    // arbit_s0_axi4lite_agent:read_rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                           // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [125:0] router_002_src_data;                                            // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                           // rsp_demux_001:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                         // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                   // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                     // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_src_valid;                                               // router:src_valid -> jamb_master_limiter:cmd_sink_valid
	wire  [125:0] router_src_data;                                                // router:src_data -> jamb_master_limiter:cmd_sink_data
	wire          router_src_ready;                                               // jamb_master_limiter:cmd_sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                             // router:src_channel -> jamb_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                       // router:src_startofpacket -> jamb_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                         // router:src_endofpacket -> jamb_master_limiter:cmd_sink_endofpacket
	wire  [125:0] jamb_master_limiter_cmd_src_data;                               // jamb_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          jamb_master_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> jamb_master_limiter:cmd_src_ready
	wire    [1:0] jamb_master_limiter_cmd_src_channel;                            // jamb_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          jamb_master_limiter_cmd_src_startofpacket;                      // jamb_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          jamb_master_limiter_cmd_src_endofpacket;                        // jamb_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                              // rsp_mux:src_valid -> jamb_master_limiter:rsp_sink_valid
	wire  [125:0] rsp_mux_src_data;                                               // rsp_mux:src_data -> jamb_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                              // jamb_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                            // rsp_mux:src_channel -> jamb_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                      // rsp_mux:src_startofpacket -> jamb_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                        // rsp_mux:src_endofpacket -> jamb_master_limiter:rsp_sink_endofpacket
	wire          jamb_master_limiter_rsp_src_valid;                              // jamb_master_limiter:rsp_src_valid -> jamb_master_agent:rp_valid
	wire  [125:0] jamb_master_limiter_rsp_src_data;                               // jamb_master_limiter:rsp_src_data -> jamb_master_agent:rp_data
	wire          jamb_master_limiter_rsp_src_ready;                              // jamb_master_agent:rp_ready -> jamb_master_limiter:rsp_src_ready
	wire    [1:0] jamb_master_limiter_rsp_src_channel;                            // jamb_master_limiter:rsp_src_channel -> jamb_master_agent:rp_channel
	wire          jamb_master_limiter_rsp_src_startofpacket;                      // jamb_master_limiter:rsp_src_startofpacket -> jamb_master_agent:rp_startofpacket
	wire          jamb_master_limiter_rsp_src_endofpacket;                        // jamb_master_limiter:rsp_src_endofpacket -> jamb_master_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                           // cmd_demux:src0_valid -> crosser:in_valid
	wire  [125:0] cmd_demux_src0_data;                                            // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                           // crosser:in_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                         // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                   // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                     // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                              // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [125:0] crosser_out_data;                                               // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                              // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [1:0] crosser_out_channel;                                            // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                      // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                        // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                           // cmd_demux:src1_valid -> crosser_001:in_valid
	wire  [125:0] cmd_demux_src1_data;                                            // cmd_demux:src1_data -> crosser_001:in_data
	wire          cmd_demux_src1_ready;                                           // crosser_001:in_ready -> cmd_demux:src1_ready
	wire    [1:0] cmd_demux_src1_channel;                                         // cmd_demux:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                   // cmd_demux:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                     // cmd_demux:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                          // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [125:0] crosser_001_out_data;                                           // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire          crosser_001_out_ready;                                          // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire    [1:0] crosser_001_out_channel;                                        // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_001_out_startofpacket;                                  // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                    // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                           // rsp_demux:src0_valid -> crosser_002:in_valid
	wire  [125:0] rsp_demux_src0_data;                                            // rsp_demux:src0_data -> crosser_002:in_data
	wire          rsp_demux_src0_ready;                                           // crosser_002:in_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                         // rsp_demux:src0_channel -> crosser_002:in_channel
	wire          rsp_demux_src0_startofpacket;                                   // rsp_demux:src0_startofpacket -> crosser_002:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                     // rsp_demux:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                          // crosser_002:out_valid -> rsp_mux:sink0_valid
	wire  [125:0] crosser_002_out_data;                                           // crosser_002:out_data -> rsp_mux:sink0_data
	wire          crosser_002_out_ready;                                          // rsp_mux:sink0_ready -> crosser_002:out_ready
	wire    [1:0] crosser_002_out_channel;                                        // crosser_002:out_channel -> rsp_mux:sink0_channel
	wire          crosser_002_out_startofpacket;                                  // crosser_002:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                    // crosser_002:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                       // rsp_demux_001:src0_valid -> crosser_003:in_valid
	wire  [125:0] rsp_demux_001_src0_data;                                        // rsp_demux_001:src0_data -> crosser_003:in_data
	wire          rsp_demux_001_src0_ready;                                       // crosser_003:in_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                     // rsp_demux_001:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_001_src0_startofpacket;                               // rsp_demux_001:src0_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                 // rsp_demux_001:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                          // crosser_003:out_valid -> rsp_mux:sink1_valid
	wire  [125:0] crosser_003_out_data;                                           // crosser_003:out_data -> rsp_mux:sink1_data
	wire          crosser_003_out_ready;                                          // rsp_mux:sink1_ready -> crosser_003:out_ready
	wire    [1:0] crosser_003_out_channel;                                        // crosser_003:out_channel -> rsp_mux:sink1_channel
	wire          crosser_003_out_startofpacket;                                  // crosser_003:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_003_out_endofpacket;                                    // crosser_003:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire    [1:0] jamb_master_limiter_cmd_valid_data;                             // jamb_master_limiter:cmd_src_valid -> cmd_demux:sink_valid

	ed_synth_emif_ph2_inst_altera_merlin_master_translator_192_lykd4la #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) jamb_master_translator (
		.clk                    (clk_bridge_out_clk_clk),                                         //   input,   width = 1,                       clk.clk
		.reset                  (jamb_master_translator_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,                     reset.reset
		.uav_address            (jamb_master_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (jamb_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (jamb_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (jamb_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (jamb_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (jamb_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (jamb_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (jamb_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (jamb_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (jamb_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (jamb_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (jamb_master_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (jamb_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (jamb_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (jamb_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (jamb_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (jamb_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (jamb_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (jamb_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                           // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                           // (terminated),                                        
		.av_begintransfer       (1'b0),                                                           // (terminated),                                        
		.av_chipselect          (1'b0),                                                           // (terminated),                                        
		.av_lock                (1'b0),                                                           // (terminated),                                        
		.av_debugaccess         (1'b0),                                                           // (terminated),                                        
		.uav_outputenable       (1'b0),                                                           // (terminated),                                        
		.uav_clken              (),                                                               // (terminated),                                        
		.av_clken               (1'b1),                                                           // (terminated),                                        
		.uav_response           (2'b00),                                                          // (terminated),                                        
		.av_response            (),                                                               // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                           // (terminated),                                        
		.av_writeresponsevalid  ()                                                                // (terminated),                                        
	);

	ed_synth_emif_ph2_inst_altera_merlin_master_agent_1922_fy3n5ti #(
		.PKT_WUNIQUE               (110),
		.PKT_DOMAIN_H              (109),
		.PKT_DOMAIN_L              (108),
		.PKT_SNOOP_H               (107),
		.PKT_SNOOP_L               (104),
		.PKT_BARRIER_H             (103),
		.PKT_BARRIER_L             (102),
		.PKT_ORI_BURST_SIZE_H      (101),
		.PKT_ORI_BURST_SIZE_L      (99),
		.PKT_RESPONSE_STATUS_H     (98),
		.PKT_RESPONSE_STATUS_L     (97),
		.PKT_QOS_H                 (86),
		.PKT_QOS_L                 (86),
		.PKT_DATA_SIDEBAND_H       (84),
		.PKT_DATA_SIDEBAND_L       (84),
		.PKT_ADDR_SIDEBAND_H       (83),
		.PKT_ADDR_SIDEBAND_L       (83),
		.PKT_BURST_TYPE_H          (82),
		.PKT_BURST_TYPE_L          (81),
		.PKT_CACHE_H               (96),
		.PKT_CACHE_L               (93),
		.PKT_THREAD_ID_H           (89),
		.PKT_THREAD_ID_L           (89),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (92),
		.PKT_PROTECTION_L          (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (88),
		.PKT_DEST_ID_L             (88),
		.PKT_POISON_H              (111),
		.PKT_POISON_L              (111),
		.PKT_DATACHK_H             (112),
		.PKT_DATACHK_L             (112),
		.PKT_ADDRCHK_H             (115),
		.PKT_ADDRCHK_L             (114),
		.PKT_SAI_H                 (116),
		.PKT_SAI_L                 (116),
		.PKT_USER_DATA_H           (113),
		.PKT_USER_DATA_L           (113),
		.ST_DATA_W                 (126),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0),
		.USE_PKT_DATACHK           (0),
		.USE_PKT_ADDRCHK           (0),
		.ROLE_BASED_USER           (0)
	) jamb_master_agent (
		.clk                   (clk_bridge_out_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset                 (jamb_master_translator_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.av_address            (jamb_master_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (jamb_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (jamb_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (jamb_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (jamb_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (jamb_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (jamb_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (jamb_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (jamb_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (jamb_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (jamb_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (jamb_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (jamb_master_agent_cp_data),                                      //  output,  width = 126,          .data
		.cp_startofpacket      (jamb_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (jamb_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (jamb_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (jamb_master_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (jamb_master_limiter_rsp_src_data),                               //   input,  width = 126,          .data
		.rp_channel            (jamb_master_limiter_rsp_src_channel),                            //   input,    width = 2,          .channel
		.rp_startofpacket      (jamb_master_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (jamb_master_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (jamb_master_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                               // (terminated),                         
		.av_writeresponsevalid ()                                                                // (terminated),                         
	);

	ed_synth_emif_ph2_inst_altera_merlin_axi_slave_ni_1990_gtyc2oq #(
		.PKT_QOS_H                   (86),
		.PKT_QOS_L                   (86),
		.PKT_THREAD_ID_H             (89),
		.PKT_THREAD_ID_L             (89),
		.PKT_RESPONSE_STATUS_H       (98),
		.PKT_RESPONSE_STATUS_L       (97),
		.PKT_BEGIN_BURST             (85),
		.PKT_CACHE_H                 (96),
		.PKT_CACHE_L                 (93),
		.PKT_DATA_SIDEBAND_H         (84),
		.PKT_DATA_SIDEBAND_L         (84),
		.PKT_ADDR_SIDEBAND_H         (83),
		.PKT_ADDR_SIDEBAND_L         (83),
		.PKT_BURST_TYPE_H            (82),
		.PKT_BURST_TYPE_L            (81),
		.PKT_PROTECTION_H            (92),
		.PKT_PROTECTION_L            (90),
		.PKT_BURST_SIZE_H            (80),
		.PKT_BURST_SIZE_L            (78),
		.PKT_BURSTWRAP_H             (77),
		.PKT_BURSTWRAP_L             (77),
		.PKT_BYTE_CNT_H              (76),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (87),
		.PKT_SRC_ID_L                (87),
		.PKT_DEST_ID_H               (88),
		.PKT_DEST_ID_L               (88),
		.PKT_ORI_BURST_SIZE_L        (99),
		.PKT_ORI_BURST_SIZE_H        (101),
		.PKT_DOMAIN_L                (108),
		.PKT_DOMAIN_H                (109),
		.PKT_SNOOP_L                 (104),
		.PKT_SNOOP_H                 (107),
		.PKT_BARRIER_L               (102),
		.PKT_BARRIER_H               (103),
		.PKT_WUNIQUE                 (110),
		.PKT_EOP_OOO                 (117),
		.PKT_SOP_OOO                 (118),
		.PKT_POISON_H                (111),
		.PKT_POISON_L                (111),
		.PKT_DATACHK_H               (112),
		.PKT_DATACHK_L               (112),
		.PKT_ADDRCHK_H               (115),
		.PKT_ADDRCHK_L               (114),
		.PKT_SAI_H                   (116),
		.PKT_SAI_L                   (116),
		.PKT_USER_DATA_H             (113),
		.PKT_USER_DATA_L             (113),
		.SAI_WIDTH                   (1),
		.ADDRCHK_WIDTH               (1),
		.USER_DATA_WIDTH             (1),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (126),
		.ADDR_WIDTH                  (32),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (2),
		.AXI_SLAVE_ID_W              (1),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.USE_PKT_DATACHK             (0),
		.USE_PKT_ADDRCHK             (0),
		.SYNC_RESET                  (0),
		.USE_MEMORY_BLOCKS           (0),
		.ROLE_BASED_USER             (0),
		.ENABLE_OOO                  (0),
		.REORDER_BUFFER              (0)
	) arbit_s0_axi4lite_agent (
		.aclk                   (clk_bridge_out_clk_3_clk),                               //   input,    width = 1,        clock_sink.clk
		.aresetn                (~arbit_s0_axi4lite_aresetn_reset_bridge_in_reset_reset), //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_001_src_valid),                                  //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cmd_mux_001_src_ready),                                  //  output,    width = 1,                  .ready
		.read_cp_data           (cmd_mux_001_src_data),                                   //   input,  width = 126,                  .data
		.read_cp_channel        (cmd_mux_001_src_channel),                                //   input,    width = 2,                  .channel
		.read_cp_startofpacket  (cmd_mux_001_src_startofpacket),                          //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_001_src_endofpacket),                            //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cmd_mux_src_ready),                                      //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cmd_mux_src_valid),                                      //   input,    width = 1,                  .valid
		.write_cp_data          (cmd_mux_src_data),                                       //   input,  width = 126,                  .data
		.write_cp_channel       (cmd_mux_src_channel),                                    //   input,    width = 2,                  .channel
		.write_cp_startofpacket (cmd_mux_src_startofpacket),                              //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_src_endofpacket),                                //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (arbit_s0_axi4lite_agent_read_rp_ready),                  //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (arbit_s0_axi4lite_agent_read_rp_valid),                  //  output,    width = 1,                  .valid
		.read_rp_data           (arbit_s0_axi4lite_agent_read_rp_data),                   //  output,  width = 126,                  .data
		.read_rp_startofpacket  (arbit_s0_axi4lite_agent_read_rp_startofpacket),          //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (arbit_s0_axi4lite_agent_read_rp_endofpacket),            //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (arbit_s0_axi4lite_agent_write_rp_ready),                 //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (arbit_s0_axi4lite_agent_write_rp_valid),                 //  output,    width = 1,                  .valid
		.write_rp_data          (arbit_s0_axi4lite_agent_write_rp_data),                  //  output,  width = 126,                  .data
		.write_rp_startofpacket (arbit_s0_axi4lite_agent_write_rp_startofpacket),         //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (arbit_s0_axi4lite_agent_write_rp_endofpacket),           //  output,    width = 1,                  .endofpacket
		.awaddr                 (arbit_s0_axi4lite_awaddr),                               //  output,   width = 32, altera_axi_master.awaddr
		.awprot                 (arbit_s0_axi4lite_awprot),                               //  output,    width = 3,                  .awprot
		.awvalid                (arbit_s0_axi4lite_awvalid),                              //  output,    width = 1,                  .awvalid
		.awready                (arbit_s0_axi4lite_awready),                              //   input,    width = 1,                  .awready
		.wdata                  (arbit_s0_axi4lite_wdata),                                //  output,   width = 32,                  .wdata
		.wstrb                  (arbit_s0_axi4lite_wstrb),                                //  output,    width = 4,                  .wstrb
		.wvalid                 (arbit_s0_axi4lite_wvalid),                               //  output,    width = 1,                  .wvalid
		.wready                 (arbit_s0_axi4lite_wready),                               //   input,    width = 1,                  .wready
		.bresp                  (arbit_s0_axi4lite_bresp),                                //   input,    width = 2,                  .bresp
		.bvalid                 (arbit_s0_axi4lite_bvalid),                               //   input,    width = 1,                  .bvalid
		.bready                 (arbit_s0_axi4lite_bready),                               //  output,    width = 1,                  .bready
		.araddr                 (arbit_s0_axi4lite_araddr),                               //  output,   width = 32,                  .araddr
		.arprot                 (arbit_s0_axi4lite_arprot),                               //  output,    width = 3,                  .arprot
		.arvalid                (arbit_s0_axi4lite_arvalid),                              //  output,    width = 1,                  .arvalid
		.arready                (arbit_s0_axi4lite_arready),                              //   input,    width = 1,                  .arready
		.rdata                  (arbit_s0_axi4lite_rdata),                                //   input,   width = 32,                  .rdata
		.rresp                  (arbit_s0_axi4lite_rresp),                                //   input,    width = 2,                  .rresp
		.rvalid                 (arbit_s0_axi4lite_rvalid),                               //   input,    width = 1,                  .rvalid
		.rready                 (arbit_s0_axi4lite_rready),                               //  output,    width = 1,                  .rready
		.awuser_addrchk         (),                                                       // (terminated),                                 
		.awuser_sai             (),                                                       // (terminated),                                 
		.wuser_datachk          (),                                                       // (terminated),                                 
		.wuser_data             (),                                                       // (terminated),                                 
		.wuser_poison           (),                                                       // (terminated),                                 
		.aruser_addrchk         (),                                                       // (terminated),                                 
		.aruser_sai             (),                                                       // (terminated),                                 
		.ruser_datachk          (4'b0000),                                                // (terminated),                                 
		.ruser_data             (1'b0),                                                   // (terminated),                                 
		.ruser_poison           (1'b0),                                                   // (terminated),                                 
		.bid                    (1'b0),                                                   // (terminated),                                 
		.buser                  (1'b0),                                                   // (terminated),                                 
		.rid                    (1'b0),                                                   // (terminated),                                 
		.ruser                  (1'b0),                                                   // (terminated),                                 
		.rlast                  (1'b0),                                                   // (terminated),                                 
		.arid                   (),                                                       // (terminated),                                 
		.arlen                  (),                                                       // (terminated),                                 
		.arsize                 (),                                                       // (terminated),                                 
		.arburst                (),                                                       // (terminated),                                 
		.arlock                 (),                                                       // (terminated),                                 
		.arcache                (),                                                       // (terminated),                                 
		.aruser                 (),                                                       // (terminated),                                 
		.wid                    (),                                                       // (terminated),                                 
		.wuser                  (),                                                       // (terminated),                                 
		.wlast                  (),                                                       // (terminated),                                 
		.awid                   (),                                                       // (terminated),                                 
		.awlen                  (),                                                       // (terminated),                                 
		.awsize                 (),                                                       // (terminated),                                 
		.awburst                (),                                                       // (terminated),                                 
		.awlock                 (),                                                       // (terminated),                                 
		.awcache                (),                                                       // (terminated),                                 
		.awuser                 (),                                                       // (terminated),                                 
		.awqos                  (),                                                       // (terminated),                                 
		.awregion               (),                                                       // (terminated),                                 
		.arqos                  (),                                                       // (terminated),                                 
		.arregion               (),                                                       // (terminated),                                 
		.arsnoop                (),                                                       // (terminated),                                 
		.ardomain               (),                                                       // (terminated),                                 
		.arbar                  (),                                                       // (terminated),                                 
		.awsnoop                (),                                                       // (terminated),                                 
		.awdomain               (),                                                       // (terminated),                                 
		.awbar                  (),                                                       // (terminated),                                 
		.awunique               ()                                                        // (terminated),                                 
	);

	ed_synth_emif_ph2_inst_altera_merlin_router_1921_rrf32uq router (
		.sink_ready         (jamb_master_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (jamb_master_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (jamb_master_agent_cp_data),                                //   input,  width = 126,          .data
		.sink_startofpacket (jamb_master_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (jamb_master_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (clk_bridge_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (jamb_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                          //  output,  width = 126,          .data
		.src_channel        (router_src_channel),                                       //  output,    width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_router_1921_6kpzi7a router_001 (
		.sink_ready         (arbit_s0_axi4lite_agent_write_rp_ready),                //  output,    width = 1,      sink.ready
		.sink_valid         (arbit_s0_axi4lite_agent_write_rp_valid),                //   input,    width = 1,          .valid
		.sink_data          (arbit_s0_axi4lite_agent_write_rp_data),                 //   input,  width = 126,          .data
		.sink_startofpacket (arbit_s0_axi4lite_agent_write_rp_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (arbit_s0_axi4lite_agent_write_rp_endofpacket),          //   input,    width = 1,          .endofpacket
		.clk                (clk_bridge_out_clk_3_clk),                              //   input,    width = 1,       clk.clk
		.reset              (arbit_s0_axi4lite_aresetn_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                   //  output,  width = 126,          .data
		.src_channel        (router_001_src_channel),                                //  output,    width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_router_1921_6kpzi7a router_002 (
		.sink_ready         (arbit_s0_axi4lite_agent_read_rp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (arbit_s0_axi4lite_agent_read_rp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (arbit_s0_axi4lite_agent_read_rp_data),                  //   input,  width = 126,          .data
		.sink_startofpacket (arbit_s0_axi4lite_agent_read_rp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (arbit_s0_axi4lite_agent_read_rp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (clk_bridge_out_clk_3_clk),                              //   input,    width = 1,       clk.clk
		.reset              (arbit_s0_axi4lite_aresetn_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                   //  output,  width = 126,          .data
		.src_channel        (router_002_src_channel),                                //  output,    width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_traffic_limiter_1921_bk6lvda #(
		.SYNC_RESET                           (0),
		.PKT_DEST_ID_H                        (88),
		.PKT_DEST_ID_L                        (88),
		.PKT_SRC_ID_H                         (87),
		.PKT_SRC_ID_L                         (87),
		.PKT_BYTE_CNT_H                       (76),
		.PKT_BYTE_CNT_L                       (74),
		.PKT_BYTEEN_H                         (35),
		.PKT_BYTEEN_L                         (32),
		.PKT_TRANS_POSTED                     (69),
		.PKT_TRANS_WRITE                      (70),
		.PKT_TRANS_SEQ_H                      (125),
		.PKT_TRANS_SEQ_L                      (119),
		.MAX_OUTSTANDING_RESPONSES            (6),
		.PIPELINED                            (0),
		.ST_DATA_W                            (126),
		.ST_CHANNEL_W                         (2),
		.VALID_WIDTH                          (2),
		.ENFORCE_ORDER                        (1),
		.PREVENT_HAZARDS                      (1),
		.SUPPORTS_POSTED_WRITES               (1),
		.SUPPORTS_NONPOSTED_WRITES            (0),
		.REORDER                              (0),
		.ENABLE_CONCURRENT_SUBORDINATE_ACCESS (0),
		.NO_REPEATED_IDS_BETWEEN_SUBORDINATES (0),
		.ENABLE_OOO                           (0)
	) jamb_master_limiter (
		.clk                    (clk_bridge_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset                  (jamb_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                         //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                         //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                          //   input,  width = 126,          .data
		.cmd_sink_channel       (router_src_channel),                                       //   input,    width = 2,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (jamb_master_limiter_cmd_src_ready),                        //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (jamb_master_limiter_cmd_src_data),                         //  output,  width = 126,          .data
		.cmd_src_channel        (jamb_master_limiter_cmd_src_channel),                      //  output,    width = 2,          .channel
		.cmd_src_startofpacket  (jamb_master_limiter_cmd_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (jamb_master_limiter_cmd_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                        //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                        //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                      //   input,    width = 2,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                         //   input,  width = 126,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (jamb_master_limiter_rsp_src_ready),                        //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (jamb_master_limiter_rsp_src_valid),                        //  output,    width = 1,          .valid
		.rsp_src_data           (jamb_master_limiter_rsp_src_data),                         //  output,  width = 126,          .data
		.rsp_src_channel        (jamb_master_limiter_rsp_src_channel),                      //  output,    width = 2,          .channel
		.rsp_src_startofpacket  (jamb_master_limiter_rsp_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (jamb_master_limiter_rsp_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (jamb_master_limiter_cmd_valid_data)                        //  output,    width = 2, cmd_valid.data
	);

	ed_synth_emif_ph2_inst_altera_merlin_demultiplexer_1921_eyjfnja cmd_demux (
		.clk                (clk_bridge_out_clk_clk),                                   //   input,    width = 1,        clk.clk
		.reset              (jamb_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready         (jamb_master_limiter_cmd_src_ready),                        //  output,    width = 1,       sink.ready
		.sink_channel       (jamb_master_limiter_cmd_src_channel),                      //   input,    width = 2,           .channel
		.sink_data          (jamb_master_limiter_cmd_src_data),                         //   input,  width = 126,           .data
		.sink_startofpacket (jamb_master_limiter_cmd_src_startofpacket),                //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (jamb_master_limiter_cmd_src_endofpacket),                  //   input,    width = 1,           .endofpacket
		.sink_valid         (jamb_master_limiter_cmd_valid_data),                       //   input,    width = 2, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                     //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                     //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                                      //  output,  width = 126,           .data
		.src0_channel       (cmd_demux_src0_channel),                                   //  output,    width = 2,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                             //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                               //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                     //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                     //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                                      //  output,  width = 126,           .data
		.src1_channel       (cmd_demux_src1_channel),                                   //  output,    width = 2,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                             //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                                //  output,    width = 1,           .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_multiplexer_1922_bt57sdi cmd_mux (
		.clk                 (clk_bridge_out_clk_3_clk),                              //   input,    width = 1,       clk.clk
		.reset               (arbit_s0_axi4lite_aresetn_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                     //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                     //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                      //  output,  width = 126,          .data
		.src_channel         (cmd_mux_src_channel),                                   //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                               //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_out_ready),                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_out_valid),                                     //   input,    width = 1,          .valid
		.sink0_channel       (crosser_out_channel),                                   //   input,    width = 2,          .channel
		.sink0_data          (crosser_out_data),                                      //   input,  width = 126,          .data
		.sink0_startofpacket (crosser_out_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                //   input,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_multiplexer_1922_bt57sdi cmd_mux_001 (
		.clk                 (clk_bridge_out_clk_3_clk),                              //   input,    width = 1,       clk.clk
		.reset               (arbit_s0_axi4lite_aresetn_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                  //  output,  width = 126,          .data
		.src_channel         (cmd_mux_001_src_channel),                               //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                 //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                 //   input,    width = 1,          .valid
		.sink0_channel       (crosser_001_out_channel),                               //   input,    width = 2,          .channel
		.sink0_data          (crosser_001_out_data),                                  //   input,  width = 126,          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                            //   input,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_demultiplexer_1921_6ce3vui rsp_demux (
		.clk                (clk_bridge_out_clk_3_clk),                              //   input,    width = 1,       clk.clk
		.reset              (arbit_s0_axi4lite_aresetn_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                //   input,    width = 2,          .channel
		.sink_data          (router_001_src_data),                                   //   input,  width = 126,          .data
		.sink_startofpacket (router_001_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                  //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                  //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                   //  output,  width = 126,          .data
		.src0_channel       (rsp_demux_src0_channel),                                //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_demultiplexer_1921_6ce3vui rsp_demux_001 (
		.clk                (clk_bridge_out_clk_3_clk),                              //   input,    width = 1,       clk.clk
		.reset              (arbit_s0_axi4lite_aresetn_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                                //   input,    width = 2,          .channel
		.sink_data          (router_002_src_data),                                   //   input,  width = 126,          .data
		.sink_startofpacket (router_002_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                               //  output,  width = 126,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                            //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_multiplexer_1922_6ap3qsq rsp_mux (
		.clk                 (clk_bridge_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset               (jamb_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                         //  output,  width = 126,          .data
		.src_channel         (rsp_mux_src_channel),                                      //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                                    //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                                    //   input,    width = 1,          .valid
		.sink0_channel       (crosser_002_out_channel),                                  //   input,    width = 2,          .channel
		.sink0_data          (crosser_002_out_data),                                     //   input,  width = 126,          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket),                              //   input,    width = 1,          .endofpacket
		.sink1_ready         (crosser_003_out_ready),                                    //  output,    width = 1,     sink1.ready
		.sink1_valid         (crosser_003_out_valid),                                    //   input,    width = 1,          .valid
		.sink1_channel       (crosser_003_out_channel),                                  //   input,    width = 2,          .channel
		.sink1_data          (crosser_003_out_data),                                     //   input,  width = 126,          .data
		.sink1_startofpacket (crosser_003_out_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (crosser_003_out_endofpacket)                               //   input,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_hs_clk_xer_1940_hclsdma #(
		.DATA_WIDTH          (126),
		.BITS_PER_SYMBOL     (126),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser (
		.in_clk            (clk_bridge_out_clk_clk),                                   //   input,    width = 1,        in_clk.clk
		.in_reset          (jamb_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_bridge_out_clk_3_clk),                                 //   input,    width = 1,       out_clk.clk
		.out_reset         (arbit_s0_axi4lite_aresetn_reset_bridge_in_reset_reset),    //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                   //   input,    width = 2,              .channel
		.in_data           (cmd_demux_src0_data),                                      //   input,  width = 126,              .data
		.out_ready         (crosser_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_out_channel),                                      //  output,    width = 2,              .channel
		.out_data          (crosser_out_data),                                         //  output,  width = 126,              .data
		.in_empty          (1'b0),                                                     // (terminated),                             
		.in_error          (1'b0),                                                     // (terminated),                             
		.out_empty         (),                                                         // (terminated),                             
		.out_error         ()                                                          // (terminated),                             
	);

	ed_synth_emif_ph2_inst_hs_clk_xer_1940_hclsdma #(
		.DATA_WIDTH          (126),
		.BITS_PER_SYMBOL     (126),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_001 (
		.in_clk            (clk_bridge_out_clk_clk),                                   //   input,    width = 1,        in_clk.clk
		.in_reset          (jamb_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_bridge_out_clk_3_clk),                                 //   input,    width = 1,       out_clk.clk
		.out_reset         (arbit_s0_axi4lite_aresetn_reset_bridge_in_reset_reset),    //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src1_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                                   //   input,    width = 2,              .channel
		.in_data           (cmd_demux_src1_data),                                      //   input,  width = 126,              .data
		.out_ready         (crosser_001_out_ready),                                    //   input,    width = 1,           out.ready
		.out_valid         (crosser_001_out_valid),                                    //  output,    width = 1,              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                            //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                              //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_001_out_channel),                                  //  output,    width = 2,              .channel
		.out_data          (crosser_001_out_data),                                     //  output,  width = 126,              .data
		.in_empty          (1'b0),                                                     // (terminated),                             
		.in_error          (1'b0),                                                     // (terminated),                             
		.out_empty         (),                                                         // (terminated),                             
		.out_error         ()                                                          // (terminated),                             
	);

	ed_synth_emif_ph2_inst_hs_clk_xer_1940_hclsdma #(
		.DATA_WIDTH          (126),
		.BITS_PER_SYMBOL     (126),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_002 (
		.in_clk            (clk_bridge_out_clk_3_clk),                                 //   input,    width = 1,        in_clk.clk
		.in_reset          (arbit_s0_axi4lite_aresetn_reset_bridge_in_reset_reset),    //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_bridge_out_clk_clk),                                   //   input,    width = 1,       out_clk.clk
		.out_reset         (jamb_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                   //   input,    width = 2,              .channel
		.in_data           (rsp_demux_src0_data),                                      //   input,  width = 126,              .data
		.out_ready         (crosser_002_out_ready),                                    //   input,    width = 1,           out.ready
		.out_valid         (crosser_002_out_valid),                                    //  output,    width = 1,              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                            //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                              //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_002_out_channel),                                  //  output,    width = 2,              .channel
		.out_data          (crosser_002_out_data),                                     //  output,  width = 126,              .data
		.in_empty          (1'b0),                                                     // (terminated),                             
		.in_error          (1'b0),                                                     // (terminated),                             
		.out_empty         (),                                                         // (terminated),                             
		.out_error         ()                                                          // (terminated),                             
	);

	ed_synth_emif_ph2_inst_hs_clk_xer_1940_hclsdma #(
		.DATA_WIDTH          (126),
		.BITS_PER_SYMBOL     (126),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_003 (
		.in_clk            (clk_bridge_out_clk_3_clk),                                 //   input,    width = 1,        in_clk.clk
		.in_reset          (arbit_s0_axi4lite_aresetn_reset_bridge_in_reset_reset),    //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_bridge_out_clk_clk),                                   //   input,    width = 1,       out_clk.clk
		.out_reset         (jamb_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                 //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                                 //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                         //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                           //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                               //   input,    width = 2,              .channel
		.in_data           (rsp_demux_001_src0_data),                                  //   input,  width = 126,              .data
		.out_ready         (crosser_003_out_ready),                                    //   input,    width = 1,           out.ready
		.out_valid         (crosser_003_out_valid),                                    //  output,    width = 1,              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                            //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                              //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_003_out_channel),                                  //  output,    width = 2,              .channel
		.out_data          (crosser_003_out_data),                                     //  output,  width = 126,              .data
		.in_empty          (1'b0),                                                     // (terminated),                             
		.in_error          (1'b0),                                                     // (terminated),                             
		.out_empty         (),                                                         // (terminated),                             
		.out_error         ()                                                          // (terminated),                             
	);

endmodule
