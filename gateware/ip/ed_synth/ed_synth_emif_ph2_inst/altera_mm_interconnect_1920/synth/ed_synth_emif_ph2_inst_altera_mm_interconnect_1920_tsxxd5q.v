// ed_synth_emif_ph2_inst_altera_mm_interconnect_1920_tsxxd5q.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 24.1 115

`timescale 1 ps / 1 ps
module ed_synth_emif_ph2_inst_altera_mm_interconnect_1920_tsxxd5q (
		input  wire [6:0]   arbit_m_axi4_awid,                                        //                                       arbit_m_axi4.awid
		input  wire [31:0]  arbit_m_axi4_awaddr,                                      //                                                   .awaddr
		input  wire [7:0]   arbit_m_axi4_awlen,                                       //                                                   .awlen
		input  wire [2:0]   arbit_m_axi4_awsize,                                      //                                                   .awsize
		input  wire [1:0]   arbit_m_axi4_awburst,                                     //                                                   .awburst
		input  wire [0:0]   arbit_m_axi4_awlock,                                      //                                                   .awlock
		input  wire [2:0]   arbit_m_axi4_awprot,                                      //                                                   .awprot
		input  wire [10:0]  arbit_m_axi4_awuser,                                      //                                                   .awuser
		input  wire [3:0]   arbit_m_axi4_awqos,                                       //                                                   .awqos
		input  wire         arbit_m_axi4_awvalid,                                     //                                                   .awvalid
		output wire         arbit_m_axi4_awready,                                     //                                                   .awready
		input  wire [255:0] arbit_m_axi4_wdata,                                       //                                                   .wdata
		input  wire [31:0]  arbit_m_axi4_wstrb,                                       //                                                   .wstrb
		input  wire         arbit_m_axi4_wlast,                                       //                                                   .wlast
		input  wire         arbit_m_axi4_wvalid,                                      //                                                   .wvalid
		input  wire [31:0]  arbit_m_axi4_wuser,                                       //                                                   .wuser
		output wire         arbit_m_axi4_wready,                                      //                                                   .wready
		output wire [6:0]   arbit_m_axi4_bid,                                         //                                                   .bid
		output wire [1:0]   arbit_m_axi4_bresp,                                       //                                                   .bresp
		output wire         arbit_m_axi4_bvalid,                                      //                                                   .bvalid
		input  wire         arbit_m_axi4_bready,                                      //                                                   .bready
		input  wire [6:0]   arbit_m_axi4_arid,                                        //                                                   .arid
		input  wire [31:0]  arbit_m_axi4_araddr,                                      //                                                   .araddr
		input  wire [7:0]   arbit_m_axi4_arlen,                                       //                                                   .arlen
		input  wire [2:0]   arbit_m_axi4_arsize,                                      //                                                   .arsize
		input  wire [1:0]   arbit_m_axi4_arburst,                                     //                                                   .arburst
		input  wire [0:0]   arbit_m_axi4_arlock,                                      //                                                   .arlock
		input  wire [2:0]   arbit_m_axi4_arprot,                                      //                                                   .arprot
		input  wire [10:0]  arbit_m_axi4_aruser,                                      //                                                   .aruser
		input  wire [3:0]   arbit_m_axi4_arqos,                                       //                                                   .arqos
		input  wire         arbit_m_axi4_arvalid,                                     //                                                   .arvalid
		output wire         arbit_m_axi4_arready,                                     //                                                   .arready
		output wire [6:0]   arbit_m_axi4_rid,                                         //                                                   .rid
		output wire [255:0] arbit_m_axi4_rdata,                                       //                                                   .rdata
		output wire [1:0]   arbit_m_axi4_rresp,                                       //                                                   .rresp
		output wire         arbit_m_axi4_rlast,                                       //                                                   .rlast
		output wire         arbit_m_axi4_rvalid,                                      //                                                   .rvalid
		input  wire         arbit_m_axi4_rready,                                      //                                                   .rready
		output wire [31:0]  arbit_m_axi4_ruser,                                       //                                                   .ruser
		output wire [26:0]  cal_arch_0_s0_axi4lite_axi4_lite_awaddr,                  //                   cal_arch_0_s0_axi4lite_axi4_lite.awaddr
		output wire [2:0]   cal_arch_0_s0_axi4lite_axi4_lite_awprot,                  //                                                   .awprot
		output wire         cal_arch_0_s0_axi4lite_axi4_lite_awvalid,                 //                                                   .awvalid
		input  wire         cal_arch_0_s0_axi4lite_axi4_lite_awready,                 //                                                   .awready
		output wire [31:0]  cal_arch_0_s0_axi4lite_axi4_lite_wdata,                   //                                                   .wdata
		output wire [3:0]   cal_arch_0_s0_axi4lite_axi4_lite_wstrb,                   //                                                   .wstrb
		output wire         cal_arch_0_s0_axi4lite_axi4_lite_wvalid,                  //                                                   .wvalid
		input  wire         cal_arch_0_s0_axi4lite_axi4_lite_wready,                  //                                                   .wready
		input  wire [1:0]   cal_arch_0_s0_axi4lite_axi4_lite_bresp,                   //                                                   .bresp
		input  wire         cal_arch_0_s0_axi4lite_axi4_lite_bvalid,                  //                                                   .bvalid
		output wire         cal_arch_0_s0_axi4lite_axi4_lite_bready,                  //                                                   .bready
		output wire [26:0]  cal_arch_0_s0_axi4lite_axi4_lite_araddr,                  //                                                   .araddr
		output wire [2:0]   cal_arch_0_s0_axi4lite_axi4_lite_arprot,                  //                                                   .arprot
		output wire         cal_arch_0_s0_axi4lite_axi4_lite_arvalid,                 //                                                   .arvalid
		input  wire         cal_arch_0_s0_axi4lite_axi4_lite_arready,                 //                                                   .arready
		input  wire [31:0]  cal_arch_0_s0_axi4lite_axi4_lite_rdata,                   //                                                   .rdata
		input  wire [1:0]   cal_arch_0_s0_axi4lite_axi4_lite_rresp,                   //                                                   .rresp
		input  wire         cal_arch_0_s0_axi4lite_axi4_lite_rvalid,                  //                                                   .rvalid
		output wire         cal_arch_0_s0_axi4lite_axi4_lite_rready,                  //                                                   .rready
		input  wire         arbit_m_axi4_aresetn_reset_bridge_in_reset_reset,         //         arbit_m_axi4_aresetn_reset_bridge_in_reset.reset,  Reset Input
		input  wire         cal_arch_0_s0_axi4lite_rst_n_reset_bridge_in_reset_reset, // cal_arch_0_s0_axi4lite_rst_n_reset_bridge_in_reset.reset,  Reset Input
		input  wire         clk_bridge_out_clk_2_clk,                                 //                               clk_bridge_out_clk_2.clk,    Clock Input
		input  wire         clk_bridge_out_clk_1_clk                                  //                               clk_bridge_out_clk_1.clk,    Clock Input
	);

	wire   [31:0] arbit_m_axi4_translator_m0_ruser;                                        // arbit_m_axi4_agent:ruser -> arbit_m_axi4_translator:m0_ruser
	wire   [31:0] arbit_m_axi4_translator_m0_wuser;                                        // arbit_m_axi4_translator:m0_wuser -> arbit_m_axi4_agent:wuser
	wire    [1:0] arbit_m_axi4_translator_m0_awburst;                                      // arbit_m_axi4_translator:m0_awburst -> arbit_m_axi4_agent:awburst
	wire    [3:0] arbit_m_axi4_translator_m0_arregion;                                     // arbit_m_axi4_translator:m0_arregion -> arbit_m_axi4_agent:arregion
	wire   [10:0] arbit_m_axi4_translator_m0_awuser;                                       // arbit_m_axi4_translator:m0_awuser -> arbit_m_axi4_agent:awuser
	wire    [7:0] arbit_m_axi4_translator_m0_arlen;                                        // arbit_m_axi4_translator:m0_arlen -> arbit_m_axi4_agent:arlen
	wire    [3:0] arbit_m_axi4_translator_m0_arqos;                                        // arbit_m_axi4_translator:m0_arqos -> arbit_m_axi4_agent:arqos
	wire   [31:0] arbit_m_axi4_translator_m0_wstrb;                                        // arbit_m_axi4_translator:m0_wstrb -> arbit_m_axi4_agent:wstrb
	wire          arbit_m_axi4_translator_m0_wready;                                       // arbit_m_axi4_agent:wready -> arbit_m_axi4_translator:m0_wready
	wire    [6:0] arbit_m_axi4_translator_m0_rid;                                          // arbit_m_axi4_agent:rid -> arbit_m_axi4_translator:m0_rid
	wire          arbit_m_axi4_translator_m0_rready;                                       // arbit_m_axi4_translator:m0_rready -> arbit_m_axi4_agent:rready
	wire    [7:0] arbit_m_axi4_translator_m0_awlen;                                        // arbit_m_axi4_translator:m0_awlen -> arbit_m_axi4_agent:awlen
	wire    [3:0] arbit_m_axi4_translator_m0_awqos;                                        // arbit_m_axi4_translator:m0_awqos -> arbit_m_axi4_agent:awqos
	wire    [3:0] arbit_m_axi4_translator_m0_arcache;                                      // arbit_m_axi4_translator:m0_arcache -> arbit_m_axi4_agent:arcache
	wire          arbit_m_axi4_translator_m0_wvalid;                                       // arbit_m_axi4_translator:m0_wvalid -> arbit_m_axi4_agent:wvalid
	wire   [31:0] arbit_m_axi4_translator_m0_araddr;                                       // arbit_m_axi4_translator:m0_araddr -> arbit_m_axi4_agent:araddr
	wire    [2:0] arbit_m_axi4_translator_m0_arprot;                                       // arbit_m_axi4_translator:m0_arprot -> arbit_m_axi4_agent:arprot
	wire    [2:0] arbit_m_axi4_translator_m0_awprot;                                       // arbit_m_axi4_translator:m0_awprot -> arbit_m_axi4_agent:awprot
	wire  [255:0] arbit_m_axi4_translator_m0_wdata;                                        // arbit_m_axi4_translator:m0_wdata -> arbit_m_axi4_agent:wdata
	wire          arbit_m_axi4_translator_m0_arvalid;                                      // arbit_m_axi4_translator:m0_arvalid -> arbit_m_axi4_agent:arvalid
	wire    [3:0] arbit_m_axi4_translator_m0_awcache;                                      // arbit_m_axi4_translator:m0_awcache -> arbit_m_axi4_agent:awcache
	wire    [6:0] arbit_m_axi4_translator_m0_arid;                                         // arbit_m_axi4_translator:m0_arid -> arbit_m_axi4_agent:arid
	wire    [0:0] arbit_m_axi4_translator_m0_arlock;                                       // arbit_m_axi4_translator:m0_arlock -> arbit_m_axi4_agent:arlock
	wire    [0:0] arbit_m_axi4_translator_m0_awlock;                                       // arbit_m_axi4_translator:m0_awlock -> arbit_m_axi4_agent:awlock
	wire   [31:0] arbit_m_axi4_translator_m0_awaddr;                                       // arbit_m_axi4_translator:m0_awaddr -> arbit_m_axi4_agent:awaddr
	wire    [1:0] arbit_m_axi4_translator_m0_bresp;                                        // arbit_m_axi4_agent:bresp -> arbit_m_axi4_translator:m0_bresp
	wire          arbit_m_axi4_translator_m0_arready;                                      // arbit_m_axi4_agent:arready -> arbit_m_axi4_translator:m0_arready
	wire  [255:0] arbit_m_axi4_translator_m0_rdata;                                        // arbit_m_axi4_agent:rdata -> arbit_m_axi4_translator:m0_rdata
	wire          arbit_m_axi4_translator_m0_awready;                                      // arbit_m_axi4_agent:awready -> arbit_m_axi4_translator:m0_awready
	wire    [1:0] arbit_m_axi4_translator_m0_arburst;                                      // arbit_m_axi4_translator:m0_arburst -> arbit_m_axi4_agent:arburst
	wire    [2:0] arbit_m_axi4_translator_m0_arsize;                                       // arbit_m_axi4_translator:m0_arsize -> arbit_m_axi4_agent:arsize
	wire          arbit_m_axi4_translator_m0_bready;                                       // arbit_m_axi4_translator:m0_bready -> arbit_m_axi4_agent:bready
	wire          arbit_m_axi4_translator_m0_rlast;                                        // arbit_m_axi4_agent:rlast -> arbit_m_axi4_translator:m0_rlast
	wire          arbit_m_axi4_translator_m0_wlast;                                        // arbit_m_axi4_translator:m0_wlast -> arbit_m_axi4_agent:wlast
	wire    [3:0] arbit_m_axi4_translator_m0_awregion;                                     // arbit_m_axi4_translator:m0_awregion -> arbit_m_axi4_agent:awregion
	wire   [31:0] arbit_m_axi4_translator_m0_buser;                                        // arbit_m_axi4_agent:buser -> arbit_m_axi4_translator:m0_buser
	wire    [1:0] arbit_m_axi4_translator_m0_rresp;                                        // arbit_m_axi4_agent:rresp -> arbit_m_axi4_translator:m0_rresp
	wire    [6:0] arbit_m_axi4_translator_m0_awid;                                         // arbit_m_axi4_translator:m0_awid -> arbit_m_axi4_agent:awid
	wire    [6:0] arbit_m_axi4_translator_m0_bid;                                          // arbit_m_axi4_agent:bid -> arbit_m_axi4_translator:m0_bid
	wire          arbit_m_axi4_translator_m0_bvalid;                                       // arbit_m_axi4_agent:bvalid -> arbit_m_axi4_translator:m0_bvalid
	wire    [2:0] arbit_m_axi4_translator_m0_awsize;                                       // arbit_m_axi4_translator:m0_awsize -> arbit_m_axi4_agent:awsize
	wire          arbit_m_axi4_translator_m0_awvalid;                                      // arbit_m_axi4_translator:m0_awvalid -> arbit_m_axi4_agent:awvalid
	wire   [10:0] arbit_m_axi4_translator_m0_aruser;                                       // arbit_m_axi4_translator:m0_aruser -> arbit_m_axi4_agent:aruser
	wire          arbit_m_axi4_translator_m0_rvalid;                                       // arbit_m_axi4_agent:rvalid -> arbit_m_axi4_translator:m0_rvalid
	wire          rsp_mux_src_valid;                                                       // rsp_mux:src_valid -> arbit_m_axi4_agent:write_rp_valid
	wire  [441:0] rsp_mux_src_data;                                                        // rsp_mux:src_data -> arbit_m_axi4_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                       // arbit_m_axi4_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                     // rsp_mux:src_channel -> arbit_m_axi4_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                               // rsp_mux:src_startofpacket -> arbit_m_axi4_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                 // rsp_mux:src_endofpacket -> arbit_m_axi4_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                                   // rsp_mux_001:src_valid -> arbit_m_axi4_agent:read_rp_valid
	wire  [441:0] rsp_mux_001_src_data;                                                    // rsp_mux_001:src_data -> arbit_m_axi4_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                                   // arbit_m_axi4_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                                 // rsp_mux_001:src_channel -> arbit_m_axi4_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                           // rsp_mux_001:src_startofpacket -> arbit_m_axi4_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                             // rsp_mux_001:src_endofpacket -> arbit_m_axi4_agent:read_rp_endofpacket
	wire          arbit_m_axi4_agent_write_cp_valid;                                       // arbit_m_axi4_agent:write_cp_valid -> router:sink_valid
	wire  [441:0] arbit_m_axi4_agent_write_cp_data;                                        // arbit_m_axi4_agent:write_cp_data -> router:sink_data
	wire          arbit_m_axi4_agent_write_cp_ready;                                       // router:sink_ready -> arbit_m_axi4_agent:write_cp_ready
	wire          arbit_m_axi4_agent_write_cp_startofpacket;                               // arbit_m_axi4_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          arbit_m_axi4_agent_write_cp_endofpacket;                                 // arbit_m_axi4_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                        // router:src_valid -> cmd_demux:sink_valid
	wire  [441:0] router_src_data;                                                         // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                        // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                      // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                  // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          arbit_m_axi4_agent_read_cp_valid;                                        // arbit_m_axi4_agent:read_cp_valid -> router_001:sink_valid
	wire  [441:0] arbit_m_axi4_agent_read_cp_data;                                         // arbit_m_axi4_agent:read_cp_data -> router_001:sink_data
	wire          arbit_m_axi4_agent_read_cp_ready;                                        // router_001:sink_ready -> arbit_m_axi4_agent:read_cp_ready
	wire          arbit_m_axi4_agent_read_cp_startofpacket;                                // arbit_m_axi4_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          arbit_m_axi4_agent_read_cp_endofpacket;                                  // arbit_m_axi4_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                    // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [441:0] router_001_src_data;                                                     // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                    // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                                  // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                            // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                              // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          cal_arch_0_s0_axi4lite_axi4_lite_agent_write_rp_valid;                   // cal_arch_0_s0_axi4lite_axi4_lite_agent:write_rp_valid -> router_002:sink_valid
	wire  [189:0] cal_arch_0_s0_axi4lite_axi4_lite_agent_write_rp_data;                    // cal_arch_0_s0_axi4lite_axi4_lite_agent:write_rp_data -> router_002:sink_data
	wire          cal_arch_0_s0_axi4lite_axi4_lite_agent_write_rp_ready;                   // router_002:sink_ready -> cal_arch_0_s0_axi4lite_axi4_lite_agent:write_rp_ready
	wire          cal_arch_0_s0_axi4lite_axi4_lite_agent_write_rp_startofpacket;           // cal_arch_0_s0_axi4lite_axi4_lite_agent:write_rp_startofpacket -> router_002:sink_startofpacket
	wire          cal_arch_0_s0_axi4lite_axi4_lite_agent_write_rp_endofpacket;             // cal_arch_0_s0_axi4lite_axi4_lite_agent:write_rp_endofpacket -> router_002:sink_endofpacket
	wire          cal_arch_0_s0_axi4lite_axi4_lite_agent_read_rp_valid;                    // cal_arch_0_s0_axi4lite_axi4_lite_agent:read_rp_valid -> router_003:sink_valid
	wire  [189:0] cal_arch_0_s0_axi4lite_axi4_lite_agent_read_rp_data;                     // cal_arch_0_s0_axi4lite_axi4_lite_agent:read_rp_data -> router_003:sink_data
	wire          cal_arch_0_s0_axi4lite_axi4_lite_agent_read_rp_ready;                    // router_003:sink_ready -> cal_arch_0_s0_axi4lite_axi4_lite_agent:read_rp_ready
	wire          cal_arch_0_s0_axi4lite_axi4_lite_agent_read_rp_startofpacket;            // cal_arch_0_s0_axi4lite_axi4_lite_agent:read_rp_startofpacket -> router_003:sink_startofpacket
	wire          cal_arch_0_s0_axi4lite_axi4_lite_agent_read_rp_endofpacket;              // cal_arch_0_s0_axi4lite_axi4_lite_agent:read_rp_endofpacket -> router_003:sink_endofpacket
	wire          cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter_source0_valid;         // cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter:source0_valid -> cal_arch_0_s0_axi4lite_axi4_lite_agent:write_cp_valid
	wire  [189:0] cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter_source0_data;          // cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter:source0_data -> cal_arch_0_s0_axi4lite_axi4_lite_agent:write_cp_data
	wire          cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter_source0_ready;         // cal_arch_0_s0_axi4lite_axi4_lite_agent:write_cp_ready -> cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter:source0_ready
	wire    [1:0] cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter_source0_channel;       // cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter:source0_channel -> cal_arch_0_s0_axi4lite_axi4_lite_agent:write_cp_channel
	wire          cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter_source0_startofpacket; // cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter:source0_startofpacket -> cal_arch_0_s0_axi4lite_axi4_lite_agent:write_cp_startofpacket
	wire          cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter_source0_endofpacket;   // cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter:source0_endofpacket -> cal_arch_0_s0_axi4lite_axi4_lite_agent:write_cp_endofpacket
	wire          cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter_source0_valid;         // cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter:source0_valid -> cal_arch_0_s0_axi4lite_axi4_lite_agent:read_cp_valid
	wire  [189:0] cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter_source0_data;          // cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter:source0_data -> cal_arch_0_s0_axi4lite_axi4_lite_agent:read_cp_data
	wire          cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter_source0_ready;         // cal_arch_0_s0_axi4lite_axi4_lite_agent:read_cp_ready -> cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter:source0_ready
	wire    [1:0] cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter_source0_channel;       // cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter:source0_channel -> cal_arch_0_s0_axi4lite_axi4_lite_agent:read_cp_channel
	wire          cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter_source0_startofpacket; // cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter:source0_startofpacket -> cal_arch_0_s0_axi4lite_axi4_lite_agent:read_cp_startofpacket
	wire          cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter_source0_endofpacket;   // cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter:source0_endofpacket -> cal_arch_0_s0_axi4lite_axi4_lite_agent:read_cp_endofpacket
	wire          router_002_src_valid;                                                    // router_002:src_valid -> cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter:in_valid
	wire  [189:0] router_002_src_data;                                                     // router_002:src_data -> cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                    // cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                                  // router_002:src_channel -> cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                            // router_002:src_startofpacket -> cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                              // router_002:src_endofpacket -> cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter:in_endofpacket
	wire          cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter_src_valid;         // cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [441:0] cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter_src_data;          // cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter_src_ready;         // rsp_demux:sink_ready -> cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter:out_ready
	wire    [1:0] cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter_src_channel;       // cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter_src_startofpacket; // cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter_src_endofpacket;   // cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                                    // router_003:src_valid -> cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter:in_valid
	wire  [189:0] router_003_src_data;                                                     // router_003:src_data -> cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                                    // cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter:in_ready -> router_003:src_ready
	wire    [1:0] router_003_src_channel;                                                  // router_003:src_channel -> cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                            // router_003:src_startofpacket -> cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                              // router_003:src_endofpacket -> cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter:in_endofpacket
	wire          cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter_src_valid;         // cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [441:0] cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter_src_data;          // cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter_src_ready;         // rsp_demux_001:sink_ready -> cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter:out_ready
	wire    [1:0] cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter_src_channel;       // cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter_src_startofpacket; // cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter_src_endofpacket;   // cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          cmd_mux_src_valid;                                                       // cmd_mux:src_valid -> cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter:in_valid
	wire  [441:0] cmd_mux_src_data;                                                        // cmd_mux:src_data -> cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                       // cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                     // cmd_mux:src_channel -> cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                               // cmd_mux:src_startofpacket -> cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                 // cmd_mux:src_endofpacket -> cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter:in_endofpacket
	wire          cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter_src_valid;         // cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter:out_valid -> cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter:sink0_valid
	wire  [189:0] cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter_src_data;          // cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter:out_data -> cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter:sink0_data
	wire          cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter_src_ready;         // cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter:sink0_ready -> cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter:out_ready
	wire    [1:0] cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter_src_channel;       // cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter:out_channel -> cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter:sink0_channel
	wire          cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter_src_startofpacket; // cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter:out_startofpacket -> cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter:sink0_startofpacket
	wire          cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter_src_endofpacket;   // cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter:out_endofpacket -> cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                                   // cmd_mux_001:src_valid -> cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter:in_valid
	wire  [441:0] cmd_mux_001_src_data;                                                    // cmd_mux_001:src_data -> cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                   // cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                                 // cmd_mux_001:src_channel -> cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                           // cmd_mux_001:src_startofpacket -> cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                             // cmd_mux_001:src_endofpacket -> cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter:in_endofpacket
	wire          cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter_src_valid;         // cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter:out_valid -> cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter:sink0_valid
	wire  [189:0] cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter_src_data;          // cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter:out_data -> cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter:sink0_data
	wire          cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter_src_ready;         // cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter:sink0_ready -> cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter:out_ready
	wire    [1:0] cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter_src_channel;       // cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter:out_channel -> cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter:sink0_channel
	wire          cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter_src_startofpacket; // cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter:out_startofpacket -> cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter:sink0_startofpacket
	wire          cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter_src_endofpacket;   // cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter:out_endofpacket -> cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                    // cmd_demux:src0_valid -> crosser:in_valid
	wire  [441:0] cmd_demux_src0_data;                                                     // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                    // crosser:in_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                                  // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                            // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                              // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                       // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [441:0] crosser_out_data;                                                        // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                       // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [1:0] crosser_out_channel;                                                     // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                               // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                 // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                // cmd_demux_001:src0_valid -> crosser_001:in_valid
	wire  [441:0] cmd_demux_001_src0_data;                                                 // cmd_demux_001:src0_data -> crosser_001:in_data
	wire          cmd_demux_001_src0_ready;                                                // crosser_001:in_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                              // cmd_demux_001:src0_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                        // cmd_demux_001:src0_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                          // cmd_demux_001:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                   // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [441:0] crosser_001_out_data;                                                    // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire          crosser_001_out_ready;                                                   // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire    [1:0] crosser_001_out_channel;                                                 // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_001_out_startofpacket;                                           // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                             // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                    // rsp_demux:src0_valid -> crosser_002:in_valid
	wire  [441:0] rsp_demux_src0_data;                                                     // rsp_demux:src0_data -> crosser_002:in_data
	wire          rsp_demux_src0_ready;                                                    // crosser_002:in_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                                  // rsp_demux:src0_channel -> crosser_002:in_channel
	wire          rsp_demux_src0_startofpacket;                                            // rsp_demux:src0_startofpacket -> crosser_002:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                              // rsp_demux:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                   // crosser_002:out_valid -> rsp_mux:sink0_valid
	wire  [441:0] crosser_002_out_data;                                                    // crosser_002:out_data -> rsp_mux:sink0_data
	wire          crosser_002_out_ready;                                                   // rsp_mux:sink0_ready -> crosser_002:out_ready
	wire    [1:0] crosser_002_out_channel;                                                 // crosser_002:out_channel -> rsp_mux:sink0_channel
	wire          crosser_002_out_startofpacket;                                           // crosser_002:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                             // crosser_002:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                // rsp_demux_001:src0_valid -> crosser_003:in_valid
	wire  [441:0] rsp_demux_001_src0_data;                                                 // rsp_demux_001:src0_data -> crosser_003:in_data
	wire          rsp_demux_001_src0_ready;                                                // crosser_003:in_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                              // rsp_demux_001:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                        // rsp_demux_001:src0_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                          // rsp_demux_001:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                   // crosser_003:out_valid -> rsp_mux_001:sink0_valid
	wire  [441:0] crosser_003_out_data;                                                    // crosser_003:out_data -> rsp_mux_001:sink0_data
	wire          crosser_003_out_ready;                                                   // rsp_mux_001:sink0_ready -> crosser_003:out_ready
	wire    [1:0] crosser_003_out_channel;                                                 // crosser_003:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_003_out_startofpacket;                                           // crosser_003:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                             // crosser_003:out_endofpacket -> rsp_mux_001:sink0_endofpacket

	ed_synth_emif_ph2_inst_altera_merlin_axi_translator_1950_sjnedva #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (0),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (1),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (0),
		.USE_S0_ARQOS                      (1),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (7),
		.DATA_WIDTH                        (256),
		.M0_SAI_WIDTH                      (4),
		.S0_SAI_WIDTH                      (4),
		.USER_DATA_WIDTH                   (4),
		.M0_USER_ADDRCHK_WIDTH             (4),
		.S0_USER_ADDRCHK_WIDTH             (4),
		.S0_ID_WIDTH                       (7),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (11),
		.S0_READ_ADDR_USER_WIDTH           (11),
		.M0_WRITE_ADDR_USER_WIDTH          (11),
		.M0_READ_ADDR_USER_WIDTH           (11),
		.S0_WRITE_DATA_USER_WIDTH          (32),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (32),
		.M0_WRITE_DATA_USER_WIDTH          (32),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (32),
		.M0_READ_DATA_USER_WIDTH           (32),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (1),
		.USE_S0_ARUSER                     (1),
		.USE_S0_WUSER                      (1),
		.USE_S0_RUSER                      (1),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0),
		.USE_M0_AWUSER_ADDRCHK             (0),
		.USE_M0_AWUSER_SAI                 (0),
		.USE_M0_ARUSER_ADDRCHK             (0),
		.USE_M0_ARUSER_SAI                 (0),
		.USE_M0_WUSER_DATACHK              (0),
		.USE_M0_WUSER_POISON               (0),
		.USE_M0_RUSER_DATACHK              (0),
		.USE_M0_RUSER_POISON               (0),
		.USE_M0_WUSER_DATA                 (0),
		.USE_M0_RUSER_DATA                 (0),
		.USE_S0_AWUSER_ADDRCHK             (0),
		.USE_S0_AWUSER_SAI                 (0),
		.USE_S0_ARUSER_ADDRCHK             (0),
		.USE_S0_ARUSER_SAI                 (0),
		.USE_S0_WUSER_DATACHK              (0),
		.USE_S0_WUSER_POISON               (0),
		.USE_S0_RUSER_DATACHK              (0),
		.USE_S0_WUSER_DATA                 (0),
		.USE_S0_RUSER_DATA                 (0),
		.USE_S0_RUSER_POISON               (0),
		.REGENERATE_ADDRCHK                (0),
		.ROLE_BASED_USER                   (0)
	) arbit_m_axi4_translator (
		.aclk              (clk_bridge_out_clk_2_clk),                          //   input,    width = 1,       clk.clk
		.aresetn           (~arbit_m_axi4_aresetn_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset_n
		.m0_awid           (arbit_m_axi4_translator_m0_awid),                   //  output,    width = 7,        m0.awid
		.m0_awaddr         (arbit_m_axi4_translator_m0_awaddr),                 //  output,   width = 32,          .awaddr
		.m0_awlen          (arbit_m_axi4_translator_m0_awlen),                  //  output,    width = 8,          .awlen
		.m0_awsize         (arbit_m_axi4_translator_m0_awsize),                 //  output,    width = 3,          .awsize
		.m0_awburst        (arbit_m_axi4_translator_m0_awburst),                //  output,    width = 2,          .awburst
		.m0_awlock         (arbit_m_axi4_translator_m0_awlock),                 //  output,    width = 1,          .awlock
		.m0_awcache        (arbit_m_axi4_translator_m0_awcache),                //  output,    width = 4,          .awcache
		.m0_awprot         (arbit_m_axi4_translator_m0_awprot),                 //  output,    width = 3,          .awprot
		.m0_awuser         (arbit_m_axi4_translator_m0_awuser),                 //  output,   width = 11,          .awuser
		.m0_awqos          (arbit_m_axi4_translator_m0_awqos),                  //  output,    width = 4,          .awqos
		.m0_awregion       (arbit_m_axi4_translator_m0_awregion),               //  output,    width = 4,          .awregion
		.m0_awvalid        (arbit_m_axi4_translator_m0_awvalid),                //  output,    width = 1,          .awvalid
		.m0_awready        (arbit_m_axi4_translator_m0_awready),                //   input,    width = 1,          .awready
		.m0_wdata          (arbit_m_axi4_translator_m0_wdata),                  //  output,  width = 256,          .wdata
		.m0_wstrb          (arbit_m_axi4_translator_m0_wstrb),                  //  output,   width = 32,          .wstrb
		.m0_wlast          (arbit_m_axi4_translator_m0_wlast),                  //  output,    width = 1,          .wlast
		.m0_wvalid         (arbit_m_axi4_translator_m0_wvalid),                 //  output,    width = 1,          .wvalid
		.m0_wuser          (arbit_m_axi4_translator_m0_wuser),                  //  output,   width = 32,          .wuser
		.m0_wready         (arbit_m_axi4_translator_m0_wready),                 //   input,    width = 1,          .wready
		.m0_bid            (arbit_m_axi4_translator_m0_bid),                    //   input,    width = 7,          .bid
		.m0_bresp          (arbit_m_axi4_translator_m0_bresp),                  //   input,    width = 2,          .bresp
		.m0_buser          (arbit_m_axi4_translator_m0_buser),                  //   input,   width = 32,          .buser
		.m0_bvalid         (arbit_m_axi4_translator_m0_bvalid),                 //   input,    width = 1,          .bvalid
		.m0_bready         (arbit_m_axi4_translator_m0_bready),                 //  output,    width = 1,          .bready
		.m0_arid           (arbit_m_axi4_translator_m0_arid),                   //  output,    width = 7,          .arid
		.m0_araddr         (arbit_m_axi4_translator_m0_araddr),                 //  output,   width = 32,          .araddr
		.m0_arlen          (arbit_m_axi4_translator_m0_arlen),                  //  output,    width = 8,          .arlen
		.m0_arsize         (arbit_m_axi4_translator_m0_arsize),                 //  output,    width = 3,          .arsize
		.m0_arburst        (arbit_m_axi4_translator_m0_arburst),                //  output,    width = 2,          .arburst
		.m0_arlock         (arbit_m_axi4_translator_m0_arlock),                 //  output,    width = 1,          .arlock
		.m0_arcache        (arbit_m_axi4_translator_m0_arcache),                //  output,    width = 4,          .arcache
		.m0_arprot         (arbit_m_axi4_translator_m0_arprot),                 //  output,    width = 3,          .arprot
		.m0_aruser         (arbit_m_axi4_translator_m0_aruser),                 //  output,   width = 11,          .aruser
		.m0_arqos          (arbit_m_axi4_translator_m0_arqos),                  //  output,    width = 4,          .arqos
		.m0_arregion       (arbit_m_axi4_translator_m0_arregion),               //  output,    width = 4,          .arregion
		.m0_arvalid        (arbit_m_axi4_translator_m0_arvalid),                //  output,    width = 1,          .arvalid
		.m0_arready        (arbit_m_axi4_translator_m0_arready),                //   input,    width = 1,          .arready
		.m0_rid            (arbit_m_axi4_translator_m0_rid),                    //   input,    width = 7,          .rid
		.m0_rdata          (arbit_m_axi4_translator_m0_rdata),                  //   input,  width = 256,          .rdata
		.m0_rresp          (arbit_m_axi4_translator_m0_rresp),                  //   input,    width = 2,          .rresp
		.m0_rlast          (arbit_m_axi4_translator_m0_rlast),                  //   input,    width = 1,          .rlast
		.m0_rvalid         (arbit_m_axi4_translator_m0_rvalid),                 //   input,    width = 1,          .rvalid
		.m0_rready         (arbit_m_axi4_translator_m0_rready),                 //  output,    width = 1,          .rready
		.m0_ruser          (arbit_m_axi4_translator_m0_ruser),                  //   input,   width = 32,          .ruser
		.s0_awid           (arbit_m_axi4_awid),                                 //   input,    width = 7,        s0.awid
		.s0_awaddr         (arbit_m_axi4_awaddr),                               //   input,   width = 32,          .awaddr
		.s0_awlen          (arbit_m_axi4_awlen),                                //   input,    width = 8,          .awlen
		.s0_awsize         (arbit_m_axi4_awsize),                               //   input,    width = 3,          .awsize
		.s0_awburst        (arbit_m_axi4_awburst),                              //   input,    width = 2,          .awburst
		.s0_awlock         (arbit_m_axi4_awlock),                               //   input,    width = 1,          .awlock
		.s0_awprot         (arbit_m_axi4_awprot),                               //   input,    width = 3,          .awprot
		.s0_awuser         (arbit_m_axi4_awuser),                               //   input,   width = 11,          .awuser
		.s0_awqos          (arbit_m_axi4_awqos),                                //   input,    width = 4,          .awqos
		.s0_awvalid        (arbit_m_axi4_awvalid),                              //   input,    width = 1,          .awvalid
		.s0_awready        (arbit_m_axi4_awready),                              //  output,    width = 1,          .awready
		.s0_wdata          (arbit_m_axi4_wdata),                                //   input,  width = 256,          .wdata
		.s0_wstrb          (arbit_m_axi4_wstrb),                                //   input,   width = 32,          .wstrb
		.s0_wlast          (arbit_m_axi4_wlast),                                //   input,    width = 1,          .wlast
		.s0_wvalid         (arbit_m_axi4_wvalid),                               //   input,    width = 1,          .wvalid
		.s0_wuser          (arbit_m_axi4_wuser),                                //   input,   width = 32,          .wuser
		.s0_wready         (arbit_m_axi4_wready),                               //  output,    width = 1,          .wready
		.s0_bid            (arbit_m_axi4_bid),                                  //  output,    width = 7,          .bid
		.s0_bresp          (arbit_m_axi4_bresp),                                //  output,    width = 2,          .bresp
		.s0_bvalid         (arbit_m_axi4_bvalid),                               //  output,    width = 1,          .bvalid
		.s0_bready         (arbit_m_axi4_bready),                               //   input,    width = 1,          .bready
		.s0_arid           (arbit_m_axi4_arid),                                 //   input,    width = 7,          .arid
		.s0_araddr         (arbit_m_axi4_araddr),                               //   input,   width = 32,          .araddr
		.s0_arlen          (arbit_m_axi4_arlen),                                //   input,    width = 8,          .arlen
		.s0_arsize         (arbit_m_axi4_arsize),                               //   input,    width = 3,          .arsize
		.s0_arburst        (arbit_m_axi4_arburst),                              //   input,    width = 2,          .arburst
		.s0_arlock         (arbit_m_axi4_arlock),                               //   input,    width = 1,          .arlock
		.s0_arprot         (arbit_m_axi4_arprot),                               //   input,    width = 3,          .arprot
		.s0_aruser         (arbit_m_axi4_aruser),                               //   input,   width = 11,          .aruser
		.s0_arqos          (arbit_m_axi4_arqos),                                //   input,    width = 4,          .arqos
		.s0_arvalid        (arbit_m_axi4_arvalid),                              //   input,    width = 1,          .arvalid
		.s0_arready        (arbit_m_axi4_arready),                              //  output,    width = 1,          .arready
		.s0_rid            (arbit_m_axi4_rid),                                  //  output,    width = 7,          .rid
		.s0_rdata          (arbit_m_axi4_rdata),                                //  output,  width = 256,          .rdata
		.s0_rresp          (arbit_m_axi4_rresp),                                //  output,    width = 2,          .rresp
		.s0_rlast          (arbit_m_axi4_rlast),                                //  output,    width = 1,          .rlast
		.s0_rvalid         (arbit_m_axi4_rvalid),                               //  output,    width = 1,          .rvalid
		.s0_rready         (arbit_m_axi4_rready),                               //   input,    width = 1,          .rready
		.s0_ruser          (arbit_m_axi4_ruser),                                //  output,   width = 32,          .ruser
		.m0_awuser_addrchk (),                                                  // (terminated),                         
		.m0_awuser_sai     (),                                                  // (terminated),                         
		.m0_wuser_datachk  (),                                                  // (terminated),                         
		.m0_wuser_data     (),                                                  // (terminated),                         
		.m0_wuser_poison   (),                                                  // (terminated),                         
		.m0_aruser_addrchk (),                                                  // (terminated),                         
		.m0_aruser_sai     (),                                                  // (terminated),                         
		.m0_ruser_datachk  (32'b00000000000000000000000000000000),              // (terminated),                         
		.m0_ruser_data     (4'b0000),                                           // (terminated),                         
		.m0_ruser_poison   (4'b0000),                                           // (terminated),                         
		.s0_awcache        (4'b0000),                                           // (terminated),                         
		.s0_awuser_addrchk (4'b0000),                                           // (terminated),                         
		.s0_awuser_sai     (4'b0000),                                           // (terminated),                         
		.s0_awregion       (4'b0000),                                           // (terminated),                         
		.s0_wuser_datachk  (32'b00000000000000000000000000000000),              // (terminated),                         
		.s0_wuser_data     (4'b0000),                                           // (terminated),                         
		.s0_wuser_poison   (4'b0000),                                           // (terminated),                         
		.s0_buser          (),                                                  // (terminated),                         
		.s0_arcache        (4'b0000),                                           // (terminated),                         
		.s0_aruser_addrchk (4'b0000),                                           // (terminated),                         
		.s0_aruser_sai     (4'b0000),                                           // (terminated),                         
		.s0_arregion       (4'b0000),                                           // (terminated),                         
		.s0_ruser_datachk  (),                                                  // (terminated),                         
		.s0_ruser_data     (),                                                  // (terminated),                         
		.s0_ruser_poison   (),                                                  // (terminated),                         
		.s0_wid            (7'b0000000),                                        // (terminated),                         
		.s0_ardomain       (2'b00),                                             // (terminated),                         
		.s0_arsnoop        (4'b0000),                                           // (terminated),                         
		.s0_arbar          (2'b00),                                             // (terminated),                         
		.s0_awdomain       (2'b00),                                             // (terminated),                         
		.s0_awsnoop        (3'b000),                                            // (terminated),                         
		.s0_awbar          (2'b00),                                             // (terminated),                         
		.s0_awunique       (1'b0),                                              // (terminated),                         
		.m0_wid            (),                                                  // (terminated),                         
		.m0_ardomain       (),                                                  // (terminated),                         
		.m0_arsnoop        (),                                                  // (terminated),                         
		.m0_arbar          (),                                                  // (terminated),                         
		.m0_awdomain       (),                                                  // (terminated),                         
		.m0_awsnoop        (),                                                  // (terminated),                         
		.m0_awbar          (),                                                  // (terminated),                         
		.m0_awunique       ()                                                   // (terminated),                         
	);

	ed_synth_emif_ph2_inst_altera_merlin_axi_master_ni_1980_4qd7sla #(
		.ID_WIDTH                  (7),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (256),
		.WDATA_WIDTH               (256),
		.ADDR_USER_WIDTH           (11),
		.DATA_USER_WIDTH           (32),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.SAI_WIDTH                 (1),
		.ADDRCHK_WIDTH             (1),
		.USER_DATA_WIDTH           (1),
		.USE_PKT_DATACHK           (0),
		.USE_PKT_ADDRCHK           (0),
		.AXI_VERSION               ("AXI4"),
		.ACE_LITE_SUPPORT          (0),
		.ROLE_BASED_USER           (0),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (398),
		.PKT_CACHE_H               (418),
		.PKT_CACHE_L               (415),
		.PKT_ADDR_SIDEBAND_H       (365),
		.PKT_ADDR_SIDEBAND_L       (355),
		.PKT_PROTECTION_H          (414),
		.PKT_PROTECTION_L          (412),
		.PKT_BURST_SIZE_H          (352),
		.PKT_BURST_SIZE_L          (350),
		.PKT_BURST_TYPE_H          (354),
		.PKT_BURST_TYPE_L          (353),
		.PKT_RESPONSE_STATUS_L     (419),
		.PKT_RESPONSE_STATUS_H     (420),
		.PKT_BURSTWRAP_H           (349),
		.PKT_BURSTWRAP_L           (340),
		.PKT_BYTE_CNT_H            (339),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_EXCLUSIVE       (325),
		.PKT_TRANS_LOCK            (324),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (403),
		.PKT_SRC_ID_L              (403),
		.PKT_DEST_ID_H             (404),
		.PKT_DEST_ID_L             (404),
		.PKT_THREAD_ID_H           (411),
		.PKT_THREAD_ID_L           (405),
		.PKT_QOS_L                 (399),
		.PKT_QOS_H                 (402),
		.PKT_ORI_BURST_SIZE_L      (421),
		.PKT_ORI_BURST_SIZE_H      (423),
		.PKT_DATA_SIDEBAND_H       (397),
		.PKT_DATA_SIDEBAND_L       (366),
		.PKT_DOMAIN_H              (431),
		.PKT_DOMAIN_L              (430),
		.PKT_SNOOP_H               (429),
		.PKT_SNOOP_L               (426),
		.PKT_BARRIER_H             (425),
		.PKT_BARRIER_L             (424),
		.PKT_WUNIQUE               (432),
		.PKT_EOP_OOO               (439),
		.PKT_SOP_OOO               (440),
		.PKT_POISON_H              (433),
		.PKT_POISON_L              (433),
		.PKT_DATACHK_H             (434),
		.PKT_DATACHK_L             (434),
		.PKT_ADDRCHK_H             (437),
		.PKT_ADDRCHK_L             (436),
		.PKT_SAI_H                 (438),
		.PKT_SAI_L                 (438),
		.PKT_USER_DATA_H           (435),
		.PKT_USER_DATA_L           (435),
		.ST_DATA_W                 (442),
		.ST_CHANNEL_W              (2),
		.ID                        (0),
		.SYNC_RESET                (0)
	) arbit_m_axi4_agent (
		.aclk                   (clk_bridge_out_clk_2_clk),                          //   input,    width = 1,              clk.clk
		.aresetn                (~arbit_m_axi4_aresetn_reset_bridge_in_reset_reset), //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (arbit_m_axi4_agent_write_cp_valid),                 //  output,    width = 1,         write_cp.valid
		.write_cp_data          (arbit_m_axi4_agent_write_cp_data),                  //  output,  width = 442,                 .data
		.write_cp_startofpacket (arbit_m_axi4_agent_write_cp_startofpacket),         //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (arbit_m_axi4_agent_write_cp_endofpacket),           //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (arbit_m_axi4_agent_write_cp_ready),                 //   input,    width = 1,                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                 //   input,    width = 1,         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                  //   input,  width = 442,                 .data
		.write_rp_channel       (rsp_mux_src_channel),                               //   input,    width = 2,                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                         //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                           //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                 //  output,    width = 1,                 .ready
		.read_cp_valid          (arbit_m_axi4_agent_read_cp_valid),                  //  output,    width = 1,          read_cp.valid
		.read_cp_data           (arbit_m_axi4_agent_read_cp_data),                   //  output,  width = 442,                 .data
		.read_cp_startofpacket  (arbit_m_axi4_agent_read_cp_startofpacket),          //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (arbit_m_axi4_agent_read_cp_endofpacket),            //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (arbit_m_axi4_agent_read_cp_ready),                  //   input,    width = 1,                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                             //   input,    width = 1,          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                              //   input,  width = 442,                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                           //   input,    width = 2,                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                     //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                       //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                             //  output,    width = 1,                 .ready
		.awid                   (arbit_m_axi4_translator_m0_awid),                   //   input,    width = 7, altera_axi_slave.awid
		.awaddr                 (arbit_m_axi4_translator_m0_awaddr),                 //   input,   width = 32,                 .awaddr
		.awlen                  (arbit_m_axi4_translator_m0_awlen),                  //   input,    width = 8,                 .awlen
		.awsize                 (arbit_m_axi4_translator_m0_awsize),                 //   input,    width = 3,                 .awsize
		.awburst                (arbit_m_axi4_translator_m0_awburst),                //   input,    width = 2,                 .awburst
		.awlock                 (arbit_m_axi4_translator_m0_awlock),                 //   input,    width = 1,                 .awlock
		.awcache                (arbit_m_axi4_translator_m0_awcache),                //   input,    width = 4,                 .awcache
		.awprot                 (arbit_m_axi4_translator_m0_awprot),                 //   input,    width = 3,                 .awprot
		.awuser                 (arbit_m_axi4_translator_m0_awuser),                 //   input,   width = 11,                 .awuser
		.awqos                  (arbit_m_axi4_translator_m0_awqos),                  //   input,    width = 4,                 .awqos
		.awregion               (arbit_m_axi4_translator_m0_awregion),               //   input,    width = 4,                 .awregion
		.awvalid                (arbit_m_axi4_translator_m0_awvalid),                //   input,    width = 1,                 .awvalid
		.awready                (arbit_m_axi4_translator_m0_awready),                //  output,    width = 1,                 .awready
		.wdata                  (arbit_m_axi4_translator_m0_wdata),                  //   input,  width = 256,                 .wdata
		.wstrb                  (arbit_m_axi4_translator_m0_wstrb),                  //   input,   width = 32,                 .wstrb
		.wlast                  (arbit_m_axi4_translator_m0_wlast),                  //   input,    width = 1,                 .wlast
		.wvalid                 (arbit_m_axi4_translator_m0_wvalid),                 //   input,    width = 1,                 .wvalid
		.wuser                  (arbit_m_axi4_translator_m0_wuser),                  //   input,   width = 32,                 .wuser
		.wready                 (arbit_m_axi4_translator_m0_wready),                 //  output,    width = 1,                 .wready
		.bid                    (arbit_m_axi4_translator_m0_bid),                    //  output,    width = 7,                 .bid
		.bresp                  (arbit_m_axi4_translator_m0_bresp),                  //  output,    width = 2,                 .bresp
		.buser                  (arbit_m_axi4_translator_m0_buser),                  //  output,   width = 32,                 .buser
		.bvalid                 (arbit_m_axi4_translator_m0_bvalid),                 //  output,    width = 1,                 .bvalid
		.bready                 (arbit_m_axi4_translator_m0_bready),                 //   input,    width = 1,                 .bready
		.arid                   (arbit_m_axi4_translator_m0_arid),                   //   input,    width = 7,                 .arid
		.araddr                 (arbit_m_axi4_translator_m0_araddr),                 //   input,   width = 32,                 .araddr
		.arlen                  (arbit_m_axi4_translator_m0_arlen),                  //   input,    width = 8,                 .arlen
		.arsize                 (arbit_m_axi4_translator_m0_arsize),                 //   input,    width = 3,                 .arsize
		.arburst                (arbit_m_axi4_translator_m0_arburst),                //   input,    width = 2,                 .arburst
		.arlock                 (arbit_m_axi4_translator_m0_arlock),                 //   input,    width = 1,                 .arlock
		.arcache                (arbit_m_axi4_translator_m0_arcache),                //   input,    width = 4,                 .arcache
		.arprot                 (arbit_m_axi4_translator_m0_arprot),                 //   input,    width = 3,                 .arprot
		.aruser                 (arbit_m_axi4_translator_m0_aruser),                 //   input,   width = 11,                 .aruser
		.arqos                  (arbit_m_axi4_translator_m0_arqos),                  //   input,    width = 4,                 .arqos
		.arregion               (arbit_m_axi4_translator_m0_arregion),               //   input,    width = 4,                 .arregion
		.arvalid                (arbit_m_axi4_translator_m0_arvalid),                //   input,    width = 1,                 .arvalid
		.arready                (arbit_m_axi4_translator_m0_arready),                //  output,    width = 1,                 .arready
		.rid                    (arbit_m_axi4_translator_m0_rid),                    //  output,    width = 7,                 .rid
		.rdata                  (arbit_m_axi4_translator_m0_rdata),                  //  output,  width = 256,                 .rdata
		.rresp                  (arbit_m_axi4_translator_m0_rresp),                  //  output,    width = 2,                 .rresp
		.rlast                  (arbit_m_axi4_translator_m0_rlast),                  //  output,    width = 1,                 .rlast
		.rvalid                 (arbit_m_axi4_translator_m0_rvalid),                 //  output,    width = 1,                 .rvalid
		.rready                 (arbit_m_axi4_translator_m0_rready),                 //   input,    width = 1,                 .rready
		.ruser                  (arbit_m_axi4_translator_m0_ruser),                  //  output,   width = 32,                 .ruser
		.awuser_addrchk         (1'b0),                                              // (terminated),                                
		.awuser_sai             (1'b0),                                              // (terminated),                                
		.wuser_datachk          (32'b00000000000000000000000000000000),              // (terminated),                                
		.wuser_data             (1'b0),                                              // (terminated),                                
		.wuser_poison           (4'b0000),                                           // (terminated),                                
		.aruser_addrchk         (1'b0),                                              // (terminated),                                
		.aruser_sai             (1'b0),                                              // (terminated),                                
		.ruser_datachk          (),                                                  // (terminated),                                
		.ruser_data             (),                                                  // (terminated),                                
		.ruser_poison           (),                                                  // (terminated),                                
		.wid                    (7'b0000000),                                        // (terminated),                                
		.arsnoop                (4'b0000),                                           // (terminated),                                
		.ardomain               (2'b00),                                             // (terminated),                                
		.arbar                  (2'b00),                                             // (terminated),                                
		.awsnoop                (3'b000),                                            // (terminated),                                
		.awdomain               (2'b00),                                             // (terminated),                                
		.awbar                  (2'b00),                                             // (terminated),                                
		.awunique               (1'b0)                                               // (terminated),                                
	);

	ed_synth_emif_ph2_inst_altera_merlin_axi_slave_ni_1990_zwvfj5y #(
		.PKT_QOS_H                   (150),
		.PKT_QOS_L                   (147),
		.PKT_THREAD_ID_H             (159),
		.PKT_THREAD_ID_L             (153),
		.PKT_RESPONSE_STATUS_H       (168),
		.PKT_RESPONSE_STATUS_L       (167),
		.PKT_BEGIN_BURST             (146),
		.PKT_CACHE_H                 (166),
		.PKT_CACHE_L                 (163),
		.PKT_DATA_SIDEBAND_H         (145),
		.PKT_DATA_SIDEBAND_L         (114),
		.PKT_ADDR_SIDEBAND_H         (113),
		.PKT_ADDR_SIDEBAND_L         (103),
		.PKT_BURST_TYPE_H            (102),
		.PKT_BURST_TYPE_L            (101),
		.PKT_PROTECTION_H            (162),
		.PKT_PROTECTION_L            (160),
		.PKT_BURST_SIZE_H            (100),
		.PKT_BURST_SIZE_L            (98),
		.PKT_BURSTWRAP_H             (97),
		.PKT_BURSTWRAP_L             (88),
		.PKT_BYTE_CNT_H              (87),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (151),
		.PKT_SRC_ID_L                (151),
		.PKT_DEST_ID_H               (152),
		.PKT_DEST_ID_L               (152),
		.PKT_ORI_BURST_SIZE_L        (169),
		.PKT_ORI_BURST_SIZE_H        (171),
		.PKT_DOMAIN_L                (178),
		.PKT_DOMAIN_H                (179),
		.PKT_SNOOP_L                 (174),
		.PKT_SNOOP_H                 (177),
		.PKT_BARRIER_L               (172),
		.PKT_BARRIER_H               (173),
		.PKT_WUNIQUE                 (180),
		.PKT_EOP_OOO                 (187),
		.PKT_SOP_OOO                 (188),
		.PKT_POISON_H                (181),
		.PKT_POISON_L                (181),
		.PKT_DATACHK_H               (182),
		.PKT_DATACHK_L               (182),
		.PKT_ADDRCHK_H               (185),
		.PKT_ADDRCHK_L               (184),
		.PKT_SAI_H                   (186),
		.PKT_SAI_L                   (186),
		.PKT_USER_DATA_H             (183),
		.PKT_USER_DATA_L             (183),
		.SAI_WIDTH                   (1),
		.ADDRCHK_WIDTH               (1),
		.USER_DATA_WIDTH             (1),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (190),
		.ADDR_WIDTH                  (27),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (2),
		.AXI_SLAVE_ID_W              (1),
		.ACE_LITE_SUPPORT            (0),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1),
		.USE_PKT_DATACHK             (0),
		.USE_PKT_ADDRCHK             (0),
		.SYNC_RESET                  (0),
		.USE_MEMORY_BLOCKS           (0),
		.ROLE_BASED_USER             (0),
		.ENABLE_OOO                  (0),
		.REORDER_BUFFER              (0)
	) cal_arch_0_s0_axi4lite_axi4_lite_agent (
		.aclk                   (clk_bridge_out_clk_1_clk),                                                //   input,    width = 1,        clock_sink.clk
		.aresetn                (~cal_arch_0_s0_axi4lite_rst_n_reset_bridge_in_reset_reset),               //   input,    width = 1,        reset_sink.reset_n
		.read_cp_valid          (cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter_source0_valid),         //   input,    width = 1,           read_cp.valid
		.read_cp_ready          (cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter_source0_ready),         //  output,    width = 1,                  .ready
		.read_cp_data           (cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter_source0_data),          //   input,  width = 190,                  .data
		.read_cp_channel        (cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter_source0_channel),       //   input,    width = 2,                  .channel
		.read_cp_startofpacket  (cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter_source0_startofpacket), //   input,    width = 1,                  .startofpacket
		.read_cp_endofpacket    (cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter_source0_endofpacket),   //   input,    width = 1,                  .endofpacket
		.write_cp_ready         (cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter_source0_ready),         //  output,    width = 1,          write_cp.ready
		.write_cp_valid         (cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter_source0_valid),         //   input,    width = 1,                  .valid
		.write_cp_data          (cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter_source0_data),          //   input,  width = 190,                  .data
		.write_cp_channel       (cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter_source0_channel),       //   input,    width = 2,                  .channel
		.write_cp_startofpacket (cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter_source0_startofpacket), //   input,    width = 1,                  .startofpacket
		.write_cp_endofpacket   (cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter_source0_endofpacket),   //   input,    width = 1,                  .endofpacket
		.read_rp_ready          (cal_arch_0_s0_axi4lite_axi4_lite_agent_read_rp_ready),                    //   input,    width = 1,           read_rp.ready
		.read_rp_valid          (cal_arch_0_s0_axi4lite_axi4_lite_agent_read_rp_valid),                    //  output,    width = 1,                  .valid
		.read_rp_data           (cal_arch_0_s0_axi4lite_axi4_lite_agent_read_rp_data),                     //  output,  width = 190,                  .data
		.read_rp_startofpacket  (cal_arch_0_s0_axi4lite_axi4_lite_agent_read_rp_startofpacket),            //  output,    width = 1,                  .startofpacket
		.read_rp_endofpacket    (cal_arch_0_s0_axi4lite_axi4_lite_agent_read_rp_endofpacket),              //  output,    width = 1,                  .endofpacket
		.write_rp_ready         (cal_arch_0_s0_axi4lite_axi4_lite_agent_write_rp_ready),                   //   input,    width = 1,          write_rp.ready
		.write_rp_valid         (cal_arch_0_s0_axi4lite_axi4_lite_agent_write_rp_valid),                   //  output,    width = 1,                  .valid
		.write_rp_data          (cal_arch_0_s0_axi4lite_axi4_lite_agent_write_rp_data),                    //  output,  width = 190,                  .data
		.write_rp_startofpacket (cal_arch_0_s0_axi4lite_axi4_lite_agent_write_rp_startofpacket),           //  output,    width = 1,                  .startofpacket
		.write_rp_endofpacket   (cal_arch_0_s0_axi4lite_axi4_lite_agent_write_rp_endofpacket),             //  output,    width = 1,                  .endofpacket
		.awaddr                 (cal_arch_0_s0_axi4lite_axi4_lite_awaddr),                                 //  output,   width = 27, altera_axi_master.awaddr
		.awprot                 (cal_arch_0_s0_axi4lite_axi4_lite_awprot),                                 //  output,    width = 3,                  .awprot
		.awvalid                (cal_arch_0_s0_axi4lite_axi4_lite_awvalid),                                //  output,    width = 1,                  .awvalid
		.awready                (cal_arch_0_s0_axi4lite_axi4_lite_awready),                                //   input,    width = 1,                  .awready
		.wdata                  (cal_arch_0_s0_axi4lite_axi4_lite_wdata),                                  //  output,   width = 32,                  .wdata
		.wstrb                  (cal_arch_0_s0_axi4lite_axi4_lite_wstrb),                                  //  output,    width = 4,                  .wstrb
		.wvalid                 (cal_arch_0_s0_axi4lite_axi4_lite_wvalid),                                 //  output,    width = 1,                  .wvalid
		.wready                 (cal_arch_0_s0_axi4lite_axi4_lite_wready),                                 //   input,    width = 1,                  .wready
		.bresp                  (cal_arch_0_s0_axi4lite_axi4_lite_bresp),                                  //   input,    width = 2,                  .bresp
		.bvalid                 (cal_arch_0_s0_axi4lite_axi4_lite_bvalid),                                 //   input,    width = 1,                  .bvalid
		.bready                 (cal_arch_0_s0_axi4lite_axi4_lite_bready),                                 //  output,    width = 1,                  .bready
		.araddr                 (cal_arch_0_s0_axi4lite_axi4_lite_araddr),                                 //  output,   width = 27,                  .araddr
		.arprot                 (cal_arch_0_s0_axi4lite_axi4_lite_arprot),                                 //  output,    width = 3,                  .arprot
		.arvalid                (cal_arch_0_s0_axi4lite_axi4_lite_arvalid),                                //  output,    width = 1,                  .arvalid
		.arready                (cal_arch_0_s0_axi4lite_axi4_lite_arready),                                //   input,    width = 1,                  .arready
		.rdata                  (cal_arch_0_s0_axi4lite_axi4_lite_rdata),                                  //   input,   width = 32,                  .rdata
		.rresp                  (cal_arch_0_s0_axi4lite_axi4_lite_rresp),                                  //   input,    width = 2,                  .rresp
		.rvalid                 (cal_arch_0_s0_axi4lite_axi4_lite_rvalid),                                 //   input,    width = 1,                  .rvalid
		.rready                 (cal_arch_0_s0_axi4lite_axi4_lite_rready),                                 //  output,    width = 1,                  .rready
		.awuser_addrchk         (),                                                                        // (terminated),                                 
		.awuser_sai             (),                                                                        // (terminated),                                 
		.wuser_datachk          (),                                                                        // (terminated),                                 
		.wuser_data             (),                                                                        // (terminated),                                 
		.wuser_poison           (),                                                                        // (terminated),                                 
		.aruser_addrchk         (),                                                                        // (terminated),                                 
		.aruser_sai             (),                                                                        // (terminated),                                 
		.ruser_datachk          (4'b0000),                                                                 // (terminated),                                 
		.ruser_data             (1'b0),                                                                    // (terminated),                                 
		.ruser_poison           (1'b0),                                                                    // (terminated),                                 
		.bid                    (1'b0),                                                                    // (terminated),                                 
		.buser                  (1'b0),                                                                    // (terminated),                                 
		.rid                    (1'b0),                                                                    // (terminated),                                 
		.ruser                  (1'b0),                                                                    // (terminated),                                 
		.rlast                  (1'b0),                                                                    // (terminated),                                 
		.arid                   (),                                                                        // (terminated),                                 
		.arlen                  (),                                                                        // (terminated),                                 
		.arsize                 (),                                                                        // (terminated),                                 
		.arburst                (),                                                                        // (terminated),                                 
		.arlock                 (),                                                                        // (terminated),                                 
		.arcache                (),                                                                        // (terminated),                                 
		.aruser                 (),                                                                        // (terminated),                                 
		.wid                    (),                                                                        // (terminated),                                 
		.wuser                  (),                                                                        // (terminated),                                 
		.wlast                  (),                                                                        // (terminated),                                 
		.awid                   (),                                                                        // (terminated),                                 
		.awlen                  (),                                                                        // (terminated),                                 
		.awsize                 (),                                                                        // (terminated),                                 
		.awburst                (),                                                                        // (terminated),                                 
		.awlock                 (),                                                                        // (terminated),                                 
		.awcache                (),                                                                        // (terminated),                                 
		.awuser                 (),                                                                        // (terminated),                                 
		.awqos                  (),                                                                        // (terminated),                                 
		.awregion               (),                                                                        // (terminated),                                 
		.arqos                  (),                                                                        // (terminated),                                 
		.arregion               (),                                                                        // (terminated),                                 
		.arsnoop                (),                                                                        // (terminated),                                 
		.ardomain               (),                                                                        // (terminated),                                 
		.arbar                  (),                                                                        // (terminated),                                 
		.awsnoop                (),                                                                        // (terminated),                                 
		.awdomain               (),                                                                        // (terminated),                                 
		.awbar                  (),                                                                        // (terminated),                                 
		.awunique               ()                                                                         // (terminated),                                 
	);

	ed_synth_emif_ph2_inst_altera_merlin_router_1921_cv63bvq router (
		.sink_ready         (arbit_m_axi4_agent_write_cp_ready),                //  output,    width = 1,      sink.ready
		.sink_valid         (arbit_m_axi4_agent_write_cp_valid),                //   input,    width = 1,          .valid
		.sink_data          (arbit_m_axi4_agent_write_cp_data),                 //   input,  width = 442,          .data
		.sink_startofpacket (arbit_m_axi4_agent_write_cp_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (arbit_m_axi4_agent_write_cp_endofpacket),          //   input,    width = 1,          .endofpacket
		.clk                (clk_bridge_out_clk_2_clk),                         //   input,    width = 1,       clk.clk
		.reset              (arbit_m_axi4_aresetn_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                 //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                  //  output,  width = 442,          .data
		.src_channel        (router_src_channel),                               //  output,    width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                            //  output,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_router_1921_f5pgxfy router_001 (
		.sink_ready         (arbit_m_axi4_agent_read_cp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (arbit_m_axi4_agent_read_cp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (arbit_m_axi4_agent_read_cp_data),                  //   input,  width = 442,          .data
		.sink_startofpacket (arbit_m_axi4_agent_read_cp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (arbit_m_axi4_agent_read_cp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (clk_bridge_out_clk_2_clk),                         //   input,    width = 1,       clk.clk
		.reset              (arbit_m_axi4_aresetn_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                             //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                              //  output,  width = 442,          .data
		.src_channel        (router_001_src_channel),                           //  output,    width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                        //  output,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_router_1921_y4xg5fq router_002 (
		.sink_ready         (cal_arch_0_s0_axi4lite_axi4_lite_agent_write_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (cal_arch_0_s0_axi4lite_axi4_lite_agent_write_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (cal_arch_0_s0_axi4lite_axi4_lite_agent_write_rp_data),          //   input,  width = 190,          .data
		.sink_startofpacket (cal_arch_0_s0_axi4lite_axi4_lite_agent_write_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (cal_arch_0_s0_axi4lite_axi4_lite_agent_write_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_bridge_out_clk_1_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (cal_arch_0_s0_axi4lite_rst_n_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                           //  output,  width = 190,          .data
		.src_channel        (router_002_src_channel),                                        //  output,    width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_router_1921_mx7sy2y router_003 (
		.sink_ready         (cal_arch_0_s0_axi4lite_axi4_lite_agent_read_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (cal_arch_0_s0_axi4lite_axi4_lite_agent_read_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (cal_arch_0_s0_axi4lite_axi4_lite_agent_read_rp_data),          //   input,  width = 190,          .data
		.sink_startofpacket (cal_arch_0_s0_axi4lite_axi4_lite_agent_read_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (cal_arch_0_s0_axi4lite_axi4_lite_agent_read_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_bridge_out_clk_1_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (cal_arch_0_s0_axi4lite_rst_n_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                         //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                          //  output,  width = 190,          .data
		.src_channel        (router_003_src_channel),                                       //  output,    width = 2,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_burst_adapter_1932_nzpowei #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (146),
		.PKT_BYTE_CNT_H            (87),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (100),
		.PKT_BURST_SIZE_L          (98),
		.PKT_BURST_TYPE_H          (102),
		.PKT_BURST_TYPE_L          (101),
		.PKT_BURSTWRAP_H           (97),
		.PKT_BURSTWRAP_L           (88),
		.PKT_SAI_H                 (89),
		.PKT_SAI_L                 (89),
		.ROLE_BASED_USER           (0),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.PKT_EOP_OOO               (89),
		.PKT_SOP_OOO               (90),
		.ENABLE_OOO                (0),
		.ST_DATA_W                 (190),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (97),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter (
		.clk                   (clk_bridge_out_clk_1_clk),                                                //   input,    width = 1,       cr0.clk
		.reset                 (cal_arch_0_s0_axi4lite_rst_n_reset_bridge_in_reset_reset),                //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter_src_valid),         //   input,    width = 1,     sink0.valid
		.sink0_data            (cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter_src_data),          //   input,  width = 190,          .data
		.sink0_channel         (cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter_src_channel),       //   input,    width = 2,          .channel
		.sink0_startofpacket   (cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink0_ready           (cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter_src_ready),         //  output,    width = 1,          .ready
		.source0_valid         (cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter_source0_data),          //  output,  width = 190,          .data
		.source0_channel       (cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter_source0_channel),       //  output,    width = 2,          .channel
		.source0_startofpacket (cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (cal_arch_0_s0_axi4lite_axi4_lite_wr_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	ed_synth_emif_ph2_inst_altera_merlin_burst_adapter_1932_nzpowei #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (146),
		.PKT_BYTE_CNT_H            (87),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (100),
		.PKT_BURST_SIZE_L          (98),
		.PKT_BURST_TYPE_H          (102),
		.PKT_BURST_TYPE_L          (101),
		.PKT_BURSTWRAP_H           (97),
		.PKT_BURSTWRAP_L           (88),
		.PKT_SAI_H                 (89),
		.PKT_SAI_L                 (89),
		.ROLE_BASED_USER           (0),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.PKT_EOP_OOO               (89),
		.PKT_SOP_OOO               (90),
		.ENABLE_OOO                (0),
		.ST_DATA_W                 (190),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (97),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter (
		.clk                   (clk_bridge_out_clk_1_clk),                                                //   input,    width = 1,       cr0.clk
		.reset                 (cal_arch_0_s0_axi4lite_rst_n_reset_bridge_in_reset_reset),                //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter_src_valid),         //   input,    width = 1,     sink0.valid
		.sink0_data            (cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter_src_data),          //   input,  width = 190,          .data
		.sink0_channel         (cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter_src_channel),       //   input,    width = 2,          .channel
		.sink0_startofpacket   (cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink0_ready           (cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter_src_ready),         //  output,    width = 1,          .ready
		.source0_valid         (cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter_source0_data),          //  output,  width = 190,          .data
		.source0_channel       (cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter_source0_channel),       //  output,    width = 2,          .channel
		.source0_startofpacket (cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (cal_arch_0_s0_axi4lite_axi4_lite_rd_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	ed_synth_emif_ph2_inst_altera_merlin_demultiplexer_1921_n5m3e4i cmd_demux (
		.clk                (clk_bridge_out_clk_2_clk),                         //   input,    width = 1,       clk.clk
		.reset              (arbit_m_axi4_aresetn_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                 //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                               //   input,    width = 2,          .channel
		.sink_data          (router_src_data),                                  //   input,  width = 442,          .data
		.sink_startofpacket (router_src_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                           //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                 //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                             //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                             //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                              //  output,  width = 442,          .data
		.src0_channel       (cmd_demux_src0_channel),                           //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                        //  output,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_demultiplexer_1921_n5m3e4i cmd_demux_001 (
		.clk                (clk_bridge_out_clk_2_clk),                         //   input,    width = 1,       clk.clk
		.reset              (arbit_m_axi4_aresetn_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                             //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                           //   input,    width = 2,          .channel
		.sink_data          (router_001_src_data),                              //   input,  width = 442,          .data
		.sink_startofpacket (router_001_src_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                       //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                             //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                         //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                         //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                          //  output,  width = 442,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                       //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                    //  output,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_multiplexer_1922_mbphuta cmd_mux (
		.clk                 (clk_bridge_out_clk_1_clk),                                 //   input,    width = 1,       clk.clk
		.reset               (cal_arch_0_s0_axi4lite_rst_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                         //  output,  width = 442,          .data
		.src_channel         (cmd_mux_src_channel),                                      //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_out_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_out_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (crosser_out_channel),                                      //   input,    width = 2,          .channel
		.sink0_data          (crosser_out_data),                                         //   input,  width = 442,          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_multiplexer_1922_mbphuta cmd_mux_001 (
		.clk                 (clk_bridge_out_clk_1_clk),                                 //   input,    width = 1,       clk.clk
		.reset               (cal_arch_0_s0_axi4lite_rst_n_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                     //  output,  width = 442,          .data
		.src_channel         (cmd_mux_001_src_channel),                                  //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                    //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                    //   input,    width = 1,          .valid
		.sink0_channel       (crosser_001_out_channel),                                  //   input,    width = 2,          .channel
		.sink0_data          (crosser_001_out_data),                                     //   input,  width = 442,          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                               //   input,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_demultiplexer_1921_n5m3e4i rsp_demux (
		.clk                (clk_bridge_out_clk_1_clk),                                                //   input,    width = 1,       clk.clk
		.reset              (cal_arch_0_s0_axi4lite_rst_n_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.sink_ready         (cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter_src_channel),       //   input,    width = 2,          .channel
		.sink_data          (cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter_src_data),          //   input,  width = 442,          .data
		.sink_startofpacket (cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                    //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                    //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                                     //  output,  width = 442,          .data
		.src0_channel       (rsp_demux_src0_channel),                                                  //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                               //  output,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_demultiplexer_1921_n5m3e4i rsp_demux_001 (
		.clk                (clk_bridge_out_clk_1_clk),                                                //   input,    width = 1,       clk.clk
		.reset              (cal_arch_0_s0_axi4lite_rst_n_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.sink_ready         (cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter_src_channel),       //   input,    width = 2,          .channel
		.sink_data          (cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter_src_data),          //   input,  width = 442,          .data
		.sink_startofpacket (cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                                 //  output,  width = 442,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                              //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_multiplexer_1922_ms4kcvq rsp_mux (
		.clk                 (clk_bridge_out_clk_2_clk),                         //   input,    width = 1,       clk.clk
		.reset               (arbit_m_axi4_aresetn_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                 //  output,  width = 442,          .data
		.src_channel         (rsp_mux_src_channel),                              //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                          //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                            //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                            //   input,    width = 1,          .valid
		.sink0_channel       (crosser_002_out_channel),                          //   input,    width = 2,          .channel
		.sink0_data          (crosser_002_out_data),                             //   input,  width = 442,          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                       //   input,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_multiplexer_1922_ms4kcvq rsp_mux_001 (
		.clk                 (clk_bridge_out_clk_2_clk),                         //   input,    width = 1,       clk.clk
		.reset               (arbit_m_axi4_aresetn_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                            //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                             //  output,  width = 442,          .data
		.src_channel         (rsp_mux_001_src_channel),                          //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                      //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                            //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                            //   input,    width = 1,          .valid
		.sink0_channel       (crosser_003_out_channel),                          //   input,    width = 2,          .channel
		.sink0_data          (crosser_003_out_data),                             //   input,  width = 442,          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)                       //   input,    width = 1,          .endofpacket
	);

	ed_synth_emif_ph2_inst_altera_merlin_width_adapter_1940_tc6ww3a #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (87),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (97),
		.IN_PKT_BURSTWRAP_L            (88),
		.IN_PKT_BURST_SIZE_H           (100),
		.IN_PKT_BURST_SIZE_L           (98),
		.IN_PKT_RESPONSE_STATUS_H      (168),
		.IN_PKT_RESPONSE_STATUS_L      (167),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (102),
		.IN_PKT_BURST_TYPE_L           (101),
		.IN_PKT_ORI_BURST_SIZE_L       (169),
		.IN_PKT_ORI_BURST_SIZE_H       (171),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (190),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (339),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (352),
		.OUT_PKT_BURST_SIZE_L          (350),
		.OUT_PKT_RESPONSE_STATUS_H     (420),
		.OUT_PKT_RESPONSE_STATUS_L     (419),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (354),
		.OUT_PKT_BURST_TYPE_L          (353),
		.OUT_PKT_ORI_BURST_SIZE_L      (421),
		.OUT_PKT_ORI_BURST_SIZE_H      (423),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (439),
		.OUT_PKT_SOP_OOO               (440),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (442),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (0)
	) cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter (
		.clk                  (clk_bridge_out_clk_1_clk),                                                //   input,    width = 1,       clk.clk
		.reset                (cal_arch_0_s0_axi4lite_rst_n_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.in_valid             (router_002_src_valid),                                                    //   input,    width = 1,      sink.valid
		.in_channel           (router_002_src_channel),                                                  //   input,    width = 2,          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.in_ready             (router_002_src_ready),                                                    //  output,    width = 1,          .ready
		.in_data              (router_002_src_data),                                                     //   input,  width = 190,          .data
		.out_endofpacket      (cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter_src_data),          //  output,  width = 442,          .data
		.out_channel          (cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter_src_channel),       //  output,    width = 2,          .channel
		.out_valid            (cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (cal_arch_0_s0_axi4lite_axi4_lite_wr_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	ed_synth_emif_ph2_inst_altera_merlin_width_adapter_1940_tc6ww3a #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (87),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (97),
		.IN_PKT_BURSTWRAP_L            (88),
		.IN_PKT_BURST_SIZE_H           (100),
		.IN_PKT_BURST_SIZE_L           (98),
		.IN_PKT_RESPONSE_STATUS_H      (168),
		.IN_PKT_RESPONSE_STATUS_L      (167),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (102),
		.IN_PKT_BURST_TYPE_L           (101),
		.IN_PKT_ORI_BURST_SIZE_L       (169),
		.IN_PKT_ORI_BURST_SIZE_H       (171),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (190),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (339),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (352),
		.OUT_PKT_BURST_SIZE_L          (350),
		.OUT_PKT_RESPONSE_STATUS_H     (420),
		.OUT_PKT_RESPONSE_STATUS_L     (419),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (354),
		.OUT_PKT_BURST_TYPE_L          (353),
		.OUT_PKT_ORI_BURST_SIZE_L      (421),
		.OUT_PKT_ORI_BURST_SIZE_H      (423),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (439),
		.OUT_PKT_SOP_OOO               (440),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (442),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (0)
	) cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter (
		.clk                  (clk_bridge_out_clk_1_clk),                                                //   input,    width = 1,       clk.clk
		.reset                (cal_arch_0_s0_axi4lite_rst_n_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.in_valid             (router_003_src_valid),                                                    //   input,    width = 1,      sink.valid
		.in_channel           (router_003_src_channel),                                                  //   input,    width = 2,          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.in_ready             (router_003_src_ready),                                                    //  output,    width = 1,          .ready
		.in_data              (router_003_src_data),                                                     //   input,  width = 190,          .data
		.out_endofpacket      (cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter_src_data),          //  output,  width = 442,          .data
		.out_channel          (cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter_src_channel),       //  output,    width = 2,          .channel
		.out_valid            (cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (cal_arch_0_s0_axi4lite_axi4_lite_rd_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	ed_synth_emif_ph2_inst_altera_merlin_width_adapter_1940_asabjvy #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (339),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (349),
		.IN_PKT_BURSTWRAP_L            (340),
		.IN_PKT_BURST_SIZE_H           (352),
		.IN_PKT_BURST_SIZE_L           (350),
		.IN_PKT_RESPONSE_STATUS_H      (420),
		.IN_PKT_RESPONSE_STATUS_L      (419),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (354),
		.IN_PKT_BURST_TYPE_L           (353),
		.IN_PKT_ORI_BURST_SIZE_L       (421),
		.IN_PKT_ORI_BURST_SIZE_H       (423),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (442),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (87),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (100),
		.OUT_PKT_BURST_SIZE_L          (98),
		.OUT_PKT_RESPONSE_STATUS_H     (168),
		.OUT_PKT_RESPONSE_STATUS_L     (167),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (102),
		.OUT_PKT_BURST_TYPE_L          (101),
		.OUT_PKT_ORI_BURST_SIZE_L      (169),
		.OUT_PKT_ORI_BURST_SIZE_H      (171),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (187),
		.OUT_PKT_SOP_OOO               (188),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (190),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (0)
	) cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter (
		.clk                  (clk_bridge_out_clk_1_clk),                                                //   input,    width = 1,       clk.clk
		.reset                (cal_arch_0_s0_axi4lite_rst_n_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                       //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                     //   input,    width = 2,          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                       //  output,    width = 1,          .ready
		.in_data              (cmd_mux_src_data),                                                        //   input,  width = 442,          .data
		.out_endofpacket      (cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter_src_data),          //  output,  width = 190,          .data
		.out_channel          (cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter_src_channel),       //  output,    width = 2,          .channel
		.out_valid            (cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (cal_arch_0_s0_axi4lite_axi4_lite_wr_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	ed_synth_emif_ph2_inst_altera_merlin_width_adapter_1940_asabjvy #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (339),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (349),
		.IN_PKT_BURSTWRAP_L            (340),
		.IN_PKT_BURST_SIZE_H           (352),
		.IN_PKT_BURST_SIZE_L           (350),
		.IN_PKT_RESPONSE_STATUS_H      (420),
		.IN_PKT_RESPONSE_STATUS_L      (419),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (354),
		.IN_PKT_BURST_TYPE_L           (353),
		.IN_PKT_ORI_BURST_SIZE_L       (421),
		.IN_PKT_ORI_BURST_SIZE_H       (423),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (442),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (87),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (100),
		.OUT_PKT_BURST_SIZE_L          (98),
		.OUT_PKT_RESPONSE_STATUS_H     (168),
		.OUT_PKT_RESPONSE_STATUS_L     (167),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (102),
		.OUT_PKT_BURST_TYPE_L          (101),
		.OUT_PKT_ORI_BURST_SIZE_L      (169),
		.OUT_PKT_ORI_BURST_SIZE_H      (171),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (187),
		.OUT_PKT_SOP_OOO               (188),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (190),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (0)
	) cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter (
		.clk                  (clk_bridge_out_clk_1_clk),                                                //   input,    width = 1,       clk.clk
		.reset                (cal_arch_0_s0_axi4lite_rst_n_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                                   //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                                 //   input,    width = 2,          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                                   //  output,    width = 1,          .ready
		.in_data              (cmd_mux_001_src_data),                                                    //   input,  width = 442,          .data
		.out_endofpacket      (cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter_src_data),          //  output,  width = 190,          .data
		.out_channel          (cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter_src_channel),       //  output,    width = 2,          .channel
		.out_valid            (cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (cal_arch_0_s0_axi4lite_axi4_lite_rd_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	ed_synth_emif_ph2_inst_hs_clk_xer_1940_6uiotwa #(
		.DATA_WIDTH          (442),
		.BITS_PER_SYMBOL     (442),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser (
		.in_clk            (clk_bridge_out_clk_2_clk),                                 //   input,    width = 1,        in_clk.clk
		.in_reset          (arbit_m_axi4_aresetn_reset_bridge_in_reset_reset),         //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_bridge_out_clk_1_clk),                                 //   input,    width = 1,       out_clk.clk
		.out_reset         (cal_arch_0_s0_axi4lite_rst_n_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                   //   input,    width = 2,              .channel
		.in_data           (cmd_demux_src0_data),                                      //   input,  width = 442,              .data
		.out_ready         (crosser_out_ready),                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_out_valid),                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_out_startofpacket),                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_out_channel),                                      //  output,    width = 2,              .channel
		.out_data          (crosser_out_data),                                         //  output,  width = 442,              .data
		.in_empty          (1'b0),                                                     // (terminated),                             
		.in_error          (1'b0),                                                     // (terminated),                             
		.out_empty         (),                                                         // (terminated),                             
		.out_error         ()                                                          // (terminated),                             
	);

	ed_synth_emif_ph2_inst_hs_clk_xer_1940_6uiotwa #(
		.DATA_WIDTH          (442),
		.BITS_PER_SYMBOL     (442),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_001 (
		.in_clk            (clk_bridge_out_clk_2_clk),                                 //   input,    width = 1,        in_clk.clk
		.in_reset          (arbit_m_axi4_aresetn_reset_bridge_in_reset_reset),         //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_bridge_out_clk_1_clk),                                 //   input,    width = 1,       out_clk.clk
		.out_reset         (cal_arch_0_s0_axi4lite_rst_n_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                 //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_001_src0_valid),                                 //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                         //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                           //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                               //   input,    width = 2,              .channel
		.in_data           (cmd_demux_001_src0_data),                                  //   input,  width = 442,              .data
		.out_ready         (crosser_001_out_ready),                                    //   input,    width = 1,           out.ready
		.out_valid         (crosser_001_out_valid),                                    //  output,    width = 1,              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                            //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                              //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_001_out_channel),                                  //  output,    width = 2,              .channel
		.out_data          (crosser_001_out_data),                                     //  output,  width = 442,              .data
		.in_empty          (1'b0),                                                     // (terminated),                             
		.in_error          (1'b0),                                                     // (terminated),                             
		.out_empty         (),                                                         // (terminated),                             
		.out_error         ()                                                          // (terminated),                             
	);

	ed_synth_emif_ph2_inst_hs_clk_xer_1940_6uiotwa #(
		.DATA_WIDTH          (442),
		.BITS_PER_SYMBOL     (442),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_002 (
		.in_clk            (clk_bridge_out_clk_1_clk),                                 //   input,    width = 1,        in_clk.clk
		.in_reset          (cal_arch_0_s0_axi4lite_rst_n_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_bridge_out_clk_2_clk),                                 //   input,    width = 1,       out_clk.clk
		.out_reset         (arbit_m_axi4_aresetn_reset_bridge_in_reset_reset),         //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_src0_valid),                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                   //   input,    width = 2,              .channel
		.in_data           (rsp_demux_src0_data),                                      //   input,  width = 442,              .data
		.out_ready         (crosser_002_out_ready),                                    //   input,    width = 1,           out.ready
		.out_valid         (crosser_002_out_valid),                                    //  output,    width = 1,              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                            //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                              //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_002_out_channel),                                  //  output,    width = 2,              .channel
		.out_data          (crosser_002_out_data),                                     //  output,  width = 442,              .data
		.in_empty          (1'b0),                                                     // (terminated),                             
		.in_error          (1'b0),                                                     // (terminated),                             
		.out_empty         (),                                                         // (terminated),                             
		.out_error         ()                                                          // (terminated),                             
	);

	ed_synth_emif_ph2_inst_hs_clk_xer_1940_6uiotwa #(
		.DATA_WIDTH          (442),
		.BITS_PER_SYMBOL     (442),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_003 (
		.in_clk            (clk_bridge_out_clk_1_clk),                                 //   input,    width = 1,        in_clk.clk
		.in_reset          (cal_arch_0_s0_axi4lite_rst_n_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_bridge_out_clk_2_clk),                                 //   input,    width = 1,       out_clk.clk
		.out_reset         (arbit_m_axi4_aresetn_reset_bridge_in_reset_reset),         //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                 //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                                 //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                         //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                           //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                               //   input,    width = 2,              .channel
		.in_data           (rsp_demux_001_src0_data),                                  //   input,  width = 442,              .data
		.out_ready         (crosser_003_out_ready),                                    //   input,    width = 1,           out.ready
		.out_valid         (crosser_003_out_valid),                                    //  output,    width = 1,              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                            //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                              //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_003_out_channel),                                  //  output,    width = 2,              .channel
		.out_data          (crosser_003_out_data),                                     //  output,  width = 442,              .data
		.in_empty          (1'b0),                                                     // (terminated),                             
		.in_error          (1'b0),                                                     // (terminated),                             
		.out_empty         (),                                                         // (terminated),                             
		.out_error         ()                                                          // (terminated),                             
	);

endmodule
